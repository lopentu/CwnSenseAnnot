{"version":3,"sources":["Controller/LoginStatus.tsx","Controller/SessionInfo.tsx","Controller/Tasks/task_utils.tsx","SenseAnnot/sessionUtils/sessionReducer.ts","SenseAnnot/sessionUtils/sessionHandler.ts","SenseAnnot/annot_uploader.ts","Controller/Tasks/AssignmentList.tsx","Controller/Tasks/NavigationBar.tsx","Controller/Tasks/Tasks.tsx","Controller/Controller.tsx","SentenceViewer/Token.tsx","SentenceViewer/SentenceViewer.tsx","DataHandler/login.ts","DataHandler/getData.ts","SenseSorter/tree_utils.ts","SenseSorter/sorter_utils.ts","SenseSorter/sorter_updater.ts","SenseSorter/SenseItem.tsx","SenseSorter/SenseList.tsx","SenseSorter/GroupInfoEdit.tsx","SenseSorter/SenseTreeGroupHeader.tsx","SenseSorter/SenseTreeView.tsx","SenseSorter/SensePicker.tsx","SenseSorter/RevisionView.tsx","SenseSorter/SenseSorter.tsx","SenseSorter/sorter_uploader.ts","SenseAnnot/annot_updater.ts","SenseAnnot/SenseAnnot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoginStatus","props","linkStyle","root","color","fontSize","textDecoration","user","Stack","horizontal","name","style","paddingLeft","Link","styles","onClick","logout_fn","login_fn","SessionInfo","session","sess","last_time","Date","lastActivity","toLocaleString","id","populate_task_items","currentAssignId","assignments","annotations","map","x","assign_id","assignId","nTotal","items","length","nDone","nAmbig","Object","values","results","reduce","obj","probs","summarise_progress","checked","SessionActionType","SessionMapper","this","stepTrial","stepTodo","stepAmbig","hasAssignments","gotoAssignment","newAssignId","assig","findAssignment","cloneSession","err","console","error","itemNo","newSession","currentAssignmentId","itemId","stepFunc","findItemNo","currentItemId","newItemId","curItemId","dones","keys","todos","filter","indexOf","cursor","ambigs","rev","curAssigs","Error","assignment","undefined","curItemSerial","assign","currentItemNo","now","useSession","useReducer","action","type","Update","payload","handler","Init","initializeSession","GotoAssignment","GotoItemNo","gotoItemNo","newItemNo","NextTrial","nextTrial","PrevTrial","prevTrial","NextTodo","nextTodo","PrevTodo","prevTodo","NextAmbig","nextAmbiguous","PrevAmbig","prevAmbiguous","mapSession","dispatch","useEffect","log","db","firebase","firestore","userId","userEmail","collection","doc","set","uploadSession","AssignmentList","List","onRenderCell","item","index","actStyle","padding","height","icon","iconHovered","rootHovered","border","borderRadius","sessionDispatch","onAssignIdChanged","itemKey","check_button","ActionButton","iconProps","iconName","key","Item","align","grow","NavigationBar","buttonStyle","onItemNoChanged","SAT","onPrevTrial","onNextTrial","onPrevTodo","onNextTodo","onPrevAmbig","onNextAmbig","toString","horizontalAlign","IconButton","title","Label","minWidth","TextField","width","defaultValue","onKeyPress","event","target","newValue","parseInt","value","isNaN","Tasks","assign_items","progress","compute_progress","tokens","childrenGap","ProgressIndicator","itemName","label","Math","round","percentComplete","Separator","Controller","Token","token","isFocus","pos","endsWith","className","simplified","whiteSpace","SentenceViewer","sentence","tokenId","split","preContextElems","preContext","postContextElems","postContext","overflowX","transformUser","user_raw","empty","displayName","email","photoUrl","photoURL","uid","login","a","provider","GoogleAuthProvider","setPersistence","Auth","Persistence","LOCAL","then","signInWithPopup","result","credential","accessToken","debug","logout","signOut","fetchSenses","lemma","get","exists","data","senses","fetchSession","fetchAssignments","where","query","forEach","push","fetchAnnotations","annot","fetchSentence","sentenceId","fetchSenseTree","treeId","senseTree","countLeaves","node","children","node_type","sum","toGroup","depth","group_members","group","node_id","tag","description","allCount","level","findNode","rootNode","predicate","nodeList","findNodes","findNodeTrace","path","buf","pop","cur_node","cur_path","findParent","paths","moveNode","srcNode","tgtNode","newRoot","tgtParent","srcParent","srcIndex","splice","tgtIndex","newNodeList","slice","getLeaves","parent","flat","getGroupedSenses","ref_senses","filterText","sense_nodes","idx","cwn_id","sense_x","sense","parents","group_map","item_x","i","parent_x","parent_id","out_items","out_groups","groupNode","groupTitle","count","startIndex","groups","makeSenseTreeGroupNode","makeSenseTreeSenseNode","definition","getSenseRevision","trial","revision","annotator","timestamp","candidates","makeNewSenseRevision","cloneSenseRevision","newRevision","makeNewSenseTree","annotatorId","senseSetter","SenseItem","ref","useRef","useDrag","senseId","collect","monitor","isDragging","examples","drag","useDrop","accept","drop","onDragAndDrop","canDrop","TooltipHost","tooltipProps","onRenderContent","substr","delay","TooltipDelay","long","directionalHint","DirectionalHint","rightCenter","Persona","imageInitials","initialsColor","text","secondaryText","size","PersonaSize","size32","showSecondaryText","marginTop","userSelect","primaryText","selectionModel","Selection","onSelectionChanged","getSelection","SenseList","useState","onSenseDragAndDrop","srcSenseId","tgtSenseId","newTree","onSenseTreeUpdated","groupedSenses","overflowY","GroupedList","nestingDepth","senseRevision","onSenseRevisionUpdated","onSenseSelected","compact","selectionMode","SelectionMode","none","groupProps","showEmptyGroups","GroupInfoEdit","groupInfo","setGroupInfo","mergeStyleSets","margin","textInput","FocusTrapCallout","role","gapSpace","elemId","onDismiss","setInitialFocus","onChange","ev","newvalue","paddingTop","Button","PrimaryButton","onGroupInfoUpdate","SenseTreeGroupHeader","toggleCollapse","onToggleCollapse","editVisibility","setEditVisibility","toggleEditVisibility","groupNodeId","nodeId","isOver","groupButton","isCollapsed","countStr","deleteButton","deleteState","onDeleteGroup","editCallout","onGroupHeaderUpdate","marginLeft","groupLevel","verticalAlign","onGroupHeaderClick","onDoubleClick","SenseTreeView","setDeleteState","onGroupHeaderDrangAndDrop","srcNodeId","tgtNodeId","deleteGroup","removeGroupNode","boxShadow","Depths","depth8","newNode","unshift","addGroupNode","itemIndex","onRenderHeader","headerProps","elemProps","groupId","onSelectedNodeUpdated","SensePicker","selectedItems","senseCandidates","PersonaInitialsColor","optionalText","onResolveSuggestions","onSenseSuggestions","onPickerChanged","getRating","floor","RevisionView","iconStyle","rating","setRating","isAmbig","setIsAmbig","newRating","onRevisionUpdated","onRatingChanged","score","candids","remainProb","newProbs","selectedSenses","targets","ratingElem","Rating","min","max","unselectedIcon","newCandidates","filterStr","serial","senseInGroups","flatMap","leafs","leaf","findSense","filteredSenses","startsWith","parseFilter","onSubmit","ariaLabel","disabled","newIsAmbig","SenseSorter","__senseRevision","setSenses","setSenseTree","selectedNode","setSelectedNode","selectedGroups","setSelectedGroups","setSenseRevision","senseNodeIds","orphanSenses","orphanGroup","checkSenseTree","uploadSenseTree","sensePromise","updateSenses","senseTreePromise","initSenseTree","Promise","all","catch","session_dispatcher","new_session","NaN","assignments_setter","annotations_setter","trial_setter","preContextId","getPreContext","postContextId","getPostContext","makeNewAnnotation","annotId","getContext","direction","batchId","sentenceNoStr","sentenceNo","SenseAnnot","setUser","setAnnotations","setAssignments","setTrial","signed_in","not_signed_in","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","onAuthStateChanged","raw_user","updateSession","updateAssignments","updateAnnotations","updateTrial","onAnnotationUpdated","newAnnotation","annotation","background","borderRight","newAnnotations","updateSenseRevision","initializeIcons","App","DndProvider","backend","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cc9408f0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { User } from \"../datatypes\"\r\nimport { Link, Stack } from \"@fluentui/react\"\r\n\r\nexport interface ILoginStatus {\r\n  user: User|null;\r\n  login_fn: () => void;\r\n  logout_fn: () => void;\r\n}\r\n\r\nexport function LoginStatus(props: ILoginStatus) {\r\n  let linkStyle = {root: {color: \"white\", fontSize: \"small\", textDecoration: \"underline\"}}\r\n  if (props.user) {\r\n    return (\r\n      <Stack horizontal>\r\n        <div>{props.user.name}</div>\r\n        <div style={{paddingLeft: \"10pt\"}}>\r\n          <Link styles={linkStyle} onClick={props.logout_fn}>Logout</Link>\r\n        </div>\r\n      </Stack>\r\n    )\r\n  } else {\r\n    return (\r\n      <Stack horizontal>\r\n        <div>Not logged in</div>\r\n        <div>\r\n          <Link styles={linkStyle} onClick={props.login_fn}>Login</Link>\r\n        </div>\r\n      </Stack>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Stack } from \"@fluentui/react\";\r\nimport { SenseAnnotSession } from \"../datatypes\";\r\n\r\nexport interface ISessionInfoProps {\r\n  session: SenseAnnotSession | null,\r\n}\r\n\r\nexport function SessionInfo(props: ISessionInfoProps) {\r\n  if (props.session !== null) {\r\n    let sess = props.session;\r\n    let last_time = new Date(sess.lastActivity).toLocaleString(\"en-GB\")\r\n    return (\r\n      <Stack id=\"session-wrapper\">\r\n        <div style={{fontSize: \"small\"}}>Last activity:</div>\r\n        <div style={{fontSize: \"small\"}}>{last_time}</div>        \r\n      </Stack>\r\n    )\r\n  } else {\r\n    return <Stack id=\"session-wrapper\"></Stack>;\r\n  }\r\n\r\n}","import { Annotations, Assignments } from \"../../datatypes\";\r\n\r\nexport interface ITaskItem {\r\n  name: string;\r\n  checked: boolean;\r\n  nTotal: number;\r\n  nDone: number; nAmbig: number\r\n}\r\n\r\n\r\nexport function compute_progress(items: ITaskItem[]) {\r\n  let { nDone, nTotal } = items.reduce((obj, x) => {\r\n    obj.nDone += x.nDone;\r\n    obj.nTotal += x.nTotal;\r\n    return obj;\r\n  }, { nDone: 0, nTotal: 0 });\r\n  return nDone / nTotal;\r\n}\r\n\r\nfunction summarise_progress(\r\n  annotations: Annotations, assign_id: string) {\r\n\r\n  return Object.values(annotations[assign_id].results)\r\n    .reduce((obj, x) => {\r\n      if (x.probs.length > 0) {\r\n        obj.nDone += x.probs[0] >= 0.8 ? 1 : 0;\r\n        obj.nAmbig += x.probs[0] < 0.8 ? 1 : 0;\r\n      }\r\n      return obj;\r\n    }, { nDone: 0, nAmbig: 0 })\r\n}\r\n\r\nexport function populate_task_items(\r\n  currentAssignId: string,\r\n  assignments: Assignments,\r\n  annotations: Annotations\r\n) {\r\n\r\n  return assignments.map((x) => {\r\n    let assign_id = x.assignId;    \r\n    let nTotal = x.items.length;\r\n    let nDone = 0;\r\n    let nAmbig = 0;\r\n    if (assign_id in annotations) {\r\n      ({ nDone, nAmbig } = summarise_progress(\r\n        annotations, assign_id))\r\n    }\r\n\r\n    return {\r\n      name: x.assignId,\r\n      nTotal, nDone, nAmbig,\r\n      checked: x.assignId === currentAssignId\r\n    } as ITaskItem;\r\n  });\r\n}\r\n\r\n\r\n","import React, { useReducer, useEffect } from \"react\";\r\nimport { SenseAnnotSession, Assignments, Annotations, User } from \"../../datatypes\";\r\nimport { SessionMapper } from \"./sessionHandler\";\r\nimport { uploadSession } from \"../annot_uploader\";\r\n\r\nexport interface SessionAction {\r\n  type: SessionActionType;\r\n  payload: SessionActionPayload;\r\n}\r\n\r\nexport interface SessionActionPayload {\r\n  newSession?: NullableSessionType;\r\n  newAssignId?: string;\r\n  newItemId?: string;\r\n  newItemNo?: number;\r\n}\r\n\r\nexport enum SessionActionType {\r\n  Update = \"UPDATE\",\r\n  Init = \"INIT\",\r\n  GotoAssignment = \"GOTO_ASSIGNMENT\",\r\n  GotoItemNo = \"GOTO_ITEMNO\",\r\n  NextTrial = \"NEXT_TRIAL\",\r\n  PrevTrial = \"PREV_TRIAL\",\r\n  NextTodo = \"NEXT_TODO\",\r\n  PrevTodo = \"PREV_TODO\",\r\n  NextAmbig = \"NEXT_AMBIG\",\r\n  PrevAmbig = \"PREV_AMBIG\"\r\n}\r\n\r\ntype NullableSessionType = SenseAnnotSession | null;\r\nexport type SessionDispatch = (type: SessionActionType, payload?: SessionActionPayload) => void;\r\n\r\nexport function useSession(\r\n  assignments: Assignments,\r\n  annotations: Annotations\r\n): [NullableSessionType, SessionDispatch] {\r\n\r\n  let initState: NullableSessionType = null;\r\n\r\n  function reducer(session: NullableSessionType, action: SessionAction): NullableSessionType {\r\n\r\n    let newSession = session;\r\n    if (session === null) {\r\n      if (action.type == SessionActionType.Update) {\r\n        const payload = action.payload;\r\n        newSession = payload.newSession ? payload.newSession : session;\r\n      }\r\n    } else {\r\n      newSession = mapSession(session, assignments, annotations, action);\r\n    }\r\n\r\n    return newSession;\r\n  }\r\n\r\n  const [session, dispatch] = useReducer(reducer, initState);\r\n\r\n  useEffect(()=>{    \r\n    if (session) {     \r\n      console.log(\"Upload new session\");       \r\n      uploadSession(session);\r\n    }\r\n  }, [session]);\r\n\r\n  function dispatch_wrapper(type: SessionActionType,\r\n    payload: SessionActionPayload = {}) {\r\n\r\n    dispatch({\r\n      type: type,\r\n      payload: payload\r\n    });\r\n  }\r\n\r\n  return [session, dispatch_wrapper];\r\n}\r\n\r\nfunction mapSession(\r\n  session: SenseAnnotSession,\r\n  assignments: Assignments,\r\n  annotations: Annotations,\r\n  action: SessionAction) {\r\n  \r\n  const handler = new SessionMapper(session, assignments, annotations);\r\n  let newSession = null;\r\n  let payload = action.payload;\r\n  switch (action.type) {\r\n    case SessionActionType.Update:\r\n      newSession = payload.newSession ? payload.newSession : session;\r\n    case SessionActionType.Init:\r\n      newSession = handler.initializeSession();\r\n      break;\r\n    case SessionActionType.GotoAssignment:\r\n      newSession = handler.gotoAssignment(payload.newAssignId!);\r\n      break;\r\n      case SessionActionType.GotoItemNo:\r\n        newSession = handler.gotoItemNo(payload.newItemNo!);\r\n        break;\r\n    case SessionActionType.NextTrial:\r\n      newSession = handler.nextTrial();\r\n      break;\r\n    case SessionActionType.PrevTrial:\r\n      newSession = handler.prevTrial();\r\n      break;\r\n    case SessionActionType.NextTodo:\r\n      newSession = handler.nextTodo();\r\n      break;\r\n    case SessionActionType.PrevTodo:      \r\n      newSession = handler.prevTodo();\r\n      break;\r\n    case SessionActionType.NextAmbig:\r\n      newSession = handler.nextAmbiguous();\r\n      break;\r\n    case SessionActionType.PrevAmbig:\r\n      newSession = handler.prevAmbiguous();\r\n      break;\r\n    default:\r\n      console.error(\"Unsupported session action type\");\r\n      break;\r\n  }\r\n\r\n  return newSession;\r\n}\r\n\r\n","import { Assignments, Annotations, SenseAnnotSession, Assignment, SenseRevision } from \"../../datatypes\";\r\nimport { SessionActionPayload } from \"./sessionReducer\";\r\n\r\nexport class SessionMapper {\r\n  private session = {} as SenseAnnotSession;\r\n  private assignments = [] as Assignments;\r\n  private annotations = {} as Annotations;\r\n\r\n  constructor(session: SenseAnnotSession,\r\n    assignments: Assignments,\r\n    annotations: Annotations) {\r\n    this.session = session;\r\n    this.assignments = assignments;\r\n    this.annotations = annotations;\r\n  }\r\n\r\n  nextTrial() { return this.stepTrial((x) => x + 1); }\r\n\r\n  prevTrial() { return this.stepTrial((x) => x - 1); }\r\n\r\n  nextTodo() { return this.stepTodo((x) => x + 1); }\r\n\r\n  prevTodo() { return this.stepTodo((x) => x - 1); }\r\n\r\n  nextAmbiguous() { return this.stepAmbig((x) => x + 1); }\r\n\r\n  prevAmbiguous() { return this.stepAmbig((x) => x - 1); }\r\n\r\n  initializeSession() {    \r\n    if (this.hasAssignments()) {\r\n      return this.gotoAssignment(this.assignments[0].assignId);\r\n    } else {\r\n      return this.session;\r\n    }\r\n  }\r\n\r\n  gotoAssignment(newAssignId: string) {\r\n    try {\r\n      const assig = this.findAssignment(newAssignId);\r\n      if (assig.items.length > 0) {\r\n        let newSession = this.cloneSession(\r\n          assig.assignId, assig.items[0]);\r\n        return newSession;\r\n      } else {\r\n        return this.session;\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      return this.session;\r\n    }\r\n  }\r\n\r\n  gotoItemNo(itemNo: number){\r\n    let newSession = this.session;\r\n    try{\r\n      const assig = this.findAssignment(this.session.currentAssignmentId);\r\n      if(itemNo >= 0 && itemNo < assig.items.length){\r\n        const itemId = assig.items[itemNo];\r\n        newSession = this.cloneSession(assig.assignId, itemId);        \r\n      } \r\n    } catch (err) {\r\n      console.error(\"Error when gotoItemNo\")\r\n      console.error(err);\r\n    }\r\n    return newSession;\r\n  }\r\n\r\n  private hasAssignments() {\r\n    return this.assignments.length > 0\r\n  }\r\n\r\n  private stepTrial(stepFunc: (x: number) => number) {\r\n    let newSession = this.session;\r\n    try {\r\n      const assig = this.findAssignment(this.session.currentAssignmentId);\r\n      let itemNo = this.findItemNo(assig, this.session.currentItemId);\r\n      itemNo = stepFunc(itemNo);\r\n      if (itemNo >= 0 && itemNo < assig.items.length) {\r\n        const newItemId = assig.items[itemNo];\r\n        newSession = this.cloneSession(assig.assignId, newItemId);\r\n      }\r\n\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    \r\n    return newSession;\r\n  }\r\n\r\n  private stepTodo(stepFunc: (x: number) => number) {\r\n    let newSession = this.session;\r\n    try {\r\n      const assig = this.findAssignment(this.session.currentAssignmentId);\r\n      const curItemId = this.session.currentItemId;      \r\n      const dones = assig.assignId in this.annotations?\r\n        Object.keys(this.annotations[assig.assignId].results): [];\r\n\r\n      const todos = assig.items.filter((x) => x == curItemId || dones.indexOf(x) < 0);\r\n      let cursor = stepFunc(todos.indexOf(curItemId));      \r\n      if (cursor > 0 && cursor < todos.length) {\r\n        const newItemId = todos[cursor];\r\n        newSession = this.cloneSession(assig.assignId, newItemId);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n\r\n    return newSession;\r\n  }\r\n\r\n  private stepAmbig(stepFunc: (x: number) => number) {\r\n    let newSession = this.session;\r\n\r\n    try {\r\n      const assig = this.findAssignment(this.session.currentAssignmentId);\r\n      const curItemId = this.session.currentItemId;\r\n      const results = assig.assignId in this.annotations?\r\n        this.annotations[assig.assignId].results: {};\r\n      const ambigs = assig.items.filter((itemId: string) => {\r\n        if(!(itemId in results)) return false;\r\n        const rev = results[itemId];\r\n        return rev.probs.length > 0 && rev.probs[0] > 0.5;        \r\n      });\r\n\r\n      let cursor = stepFunc(ambigs.indexOf(curItemId));\r\n      if (cursor > 0 && cursor < ambigs.length) {\r\n        const newItemId = ambigs[cursor];\r\n        newSession = this.cloneSession(assig.assignId, newItemId);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n\r\n    return newSession;\r\n  }\r\n\r\n  private findAssignment(assignId: string): Assignment {    \r\n    const curAssigs = this.assignments.filter((x) => x.assignId == assignId);\r\n\r\n    if (curAssigs.length > 0) {\r\n      return curAssigs[0];\r\n    } else {\r\n      throw new Error(`Cannot find current assignment (${assignId})`)\r\n    }\r\n  }\r\n\r\n  private findItemNo(\r\n    assignment: Assignment, itemId: string): number {\r\n\r\n    const curItemId = itemId !== undefined? itemId: this.session.currentItemId    \r\n    const curItemSerial = assignment.items.indexOf(curItemId);\r\n\r\n    if (curItemSerial >= 0) {\r\n      return curItemSerial;\r\n    } else {\r\n      throw Error(`itemId (${curItemId}) not found in assignment(${assignment.assignId})`);\r\n    }\r\n\r\n  }\r\n\r\n  private cloneSession(assignId: string = \"\", itemId: string = \"\") {\r\n\r\n    let newSession = Object.assign({}, this.session);\r\n    if (assignId.length > 0) {\r\n      newSession.currentAssignmentId = assignId;\r\n    }\r\n\r\n    if (itemId.length > 0) {\r\n      newSession.currentItemId = itemId;\r\n    }\r\n\r\n    try{\r\n      const assig = this.findAssignment(assignId);\r\n      newSession.currentItemNo = this.findItemNo(assig, itemId);\r\n    } catch (err){\r\n      console.error(err);\r\n    }\r\n\r\n    newSession.lastActivity = Date.now();\r\n    \r\n    return newSession;\r\n  }\r\n\r\n}","import { SenseAnnotSession, Annotations, Annotation } from \"../datatypes\";\r\nimport firebase from \"firebase\";\r\n\r\nexport function uploadSession(session: SenseAnnotSession){  \r\n  let db = firebase.firestore();\r\n  let userId = session.userId;\r\n  let userEmail = session.userEmail;\r\n  let result = db.collection(\"sessions\").doc(userId).set(session);\r\n  return result;\r\n}\r\n\r\nexport function uploadAnnotation(annotation: Annotation){\r\n    let db = firebase.firestore();\r\n    let result = db.collection(\"annotations\")\r\n      .doc(annotation.annotId).set(annotation);\r\n    return result;\r\n}","import React from 'react';\r\nimport { Annotations, Assignments } from '../../datatypes';\r\nimport { List, ActionButton, Stack, concatStyleSetsWithProps } from '@fluentui/react';\r\nimport { ITaskItem } from './task_utils';\r\nimport { SessionDispatch, SessionActionType } from '../../SenseAnnot/sessionUtils/sessionReducer';\r\n\r\nexport interface IAssignmentListProps {\r\n  items: ITaskItem[]\r\n  sessionDispatch: SessionDispatch;\r\n}\r\n\r\nfunction makeEventHandler(dispatch: SessionDispatch){\r\n  return {\r\n    onAssignIdChanged: (assignId:string) => {\r\n      dispatch(SessionActionType.GotoAssignment, {newAssignId: assignId});\r\n    }\r\n  }\r\n}\r\n\r\nexport function AssignmentList(props: IAssignmentListProps) {\r\n  function render_task_item(item: ITaskItem | undefined, index: number | undefined) {\r\n\r\n    let actStyle = {\r\n      root: { padding: \"1px\", height: \"24pt\" },\r\n      icon: { color: \"white\" },\r\n      iconHovered: { color: \"white\" },\r\n      rootHovered: {\r\n        border: \"1px solid white\",\r\n        borderRadius: \"5px\"\r\n      }\r\n    };\r\n\r\n    const handler = makeEventHandler(props.sessionDispatch);\r\n\r\n    if (item) {\r\n      const itemKey = `${item.name}-${item.nDone}-${item.nAmbig}-${item.nTotal}`;\r\n\r\n      let check_button = item.checked ?\r\n        (<ActionButton styles={actStyle} iconProps={{ iconName: \"MSNVideosSolid\" }} checked={false} />) :\r\n        (<ActionButton styles={actStyle}\r\n          onClick={()=>handler.onAssignIdChanged(item.name)}\r\n          iconProps={{ iconName: \"MSNVideos\" }}\r\n          checked={false} />);\r\n                \r\n      return (\r\n        <Stack horizontal key={itemKey}>\r\n          <Stack.Item align=\"center\">{check_button}</Stack.Item>\r\n          <Stack.Item grow={1} align=\"center\">{item.name}</Stack.Item>\r\n          <Stack.Item align=\"center\">{item.nDone}/{item.nAmbig}/{item.nTotal}</Stack.Item>\r\n        </Stack>\r\n      )\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  return (\r\n    <List items={props.items} onRenderCell={render_task_item}></List>\r\n  );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Stack, IconButton, TextField, Label } from '@fluentui/react';\r\nimport { SessionDispatch, SessionActionType as SAT } from '../../SenseAnnot/sessionUtils/sessionReducer';\r\n\r\nexport interface INavigationBar {\r\n  currentItemNo: number;\r\n  sessionDispatch: SessionDispatch;\r\n}\r\nexport function NavigationBar(props: INavigationBar) {\r\n  let buttonStyle = {\r\n    root:\r\n      { color: \"white\", border: \"1px solid white\", borderRadius: \"5px\" }\r\n  }\r\n\r\n  const handler = makeEventHandler(props.sessionDispatch)\r\n  const currentItemNo = (props.currentItemNo + 1).toString();\r\n\r\n  return (\r\n    <>\r\n      <Stack horizontal horizontalAlign=\"space-evenly\">\r\n        <IconButton styles={buttonStyle}\r\n          onClick={handler.onPrevTrial}\r\n          iconProps={{ iconName: \"CaretSolidLeft\" }}\r\n          title=\"Previous Item\" />\r\n        <IconButton styles={buttonStyle}\r\n          onClick={handler.onPrevTodo}\r\n          iconProps={{ iconName: \"CaretLeft8\" }}\r\n          title=\"Previous Todo\" />\r\n        <IconButton styles={buttonStyle}\r\n          onClick={handler.onNextTodo}\r\n          iconProps={{ iconName: \"CaretRight8\" }} title=\"Next Todo\" />\r\n        <IconButton styles={buttonStyle}\r\n          onClick={handler.onNextTrial}\r\n          iconProps={{ iconName: \"CaretSolidRight\" }}\r\n          title=\"Next Item\" />\r\n      </Stack>\r\n      <Stack horizontal>\r\n        <Stack.Item>\r\n          <Label styles={{ root: { color: \"white\", minWidth: \"70px\" } }}>Go to Item</Label>\r\n        </Stack.Item>\r\n        <Stack.Item grow={1}>\r\n          <TextField styles={{ root: { width: \"100%\" } }}\r\n            key={currentItemNo}\r\n            defaultValue={currentItemNo}\r\n            onKeyPress={(event) => {\r\n              if (event.key === 'Enter') {\r\n                const target = event.target as HTMLTextAreaElement;\r\n                const newValue = parseInt(target.value);\r\n                if (newValue != undefined && !isNaN(newValue)) {\r\n                  handler.onItemNoChanged(newValue-1);\r\n                }\r\n              }\r\n            }} />\r\n        </Stack.Item>\r\n      </Stack>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nfunction makeEventHandler(dispatch: SessionDispatch) {\r\n  return {\r\n    onItemNoChanged: (itemNo: number) => {      \r\n        dispatch(SAT.GotoItemNo, { newItemNo: itemNo });      \r\n    },\r\n    onPrevTrial: () => { dispatch(SAT.PrevTrial); },\r\n    onNextTrial: () => { dispatch(SAT.NextTrial); },\r\n    onPrevTodo: () => { dispatch(SAT.PrevTodo); },\r\n    onNextTodo: () => { dispatch(SAT.NextTodo); },\r\n    onPrevAmbig: () => { dispatch(SAT.PrevAmbig); },\r\n    onNextAmbig: () => { dispatch(SAT.NextAmbig); }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Assignments, Annotations, SenseAnnotSession } from '../../datatypes';\r\nimport { Stack, ProgressIndicator, Separator } from '@fluentui/react';\r\nimport { populate_task_items, compute_progress } from './task_utils';\r\nimport { AssignmentList } from './AssignmentList';\r\nimport { NavigationBar } from './NavigationBar';\r\nimport { SessionDispatch } from '../../SenseAnnot/sessionUtils/sessionReducer';\r\n\r\n\r\nexport interface ITasksProps {\r\n  session: SenseAnnotSession | null;\r\n  assignments: Assignments;\r\n  annotations: Annotations;\r\n  sessionDispatch: SessionDispatch;\r\n}\r\n\r\nexport function Tasks(props: ITasksProps) {\r\n  let assignments = props.assignments;\r\n  let annotations = props.annotations;  \r\n\r\n  if(props.session === null){\r\n    return null;\r\n  }\r\n\r\n  let session = props.session!;\r\n  let assign_items = populate_task_items(\r\n    session.currentAssignmentId, props.assignments, props.annotations);\r\n  let progress = compute_progress(assign_items);  \r\n\r\n  return (\r\n    <Stack tokens={{ childrenGap: 10 }}>\r\n      <ProgressIndicator\r\n        styles={{ itemName: { color: \"white\" } }}\r\n        label={`${Math.round(progress * 10000) / 100}% Complete`}\r\n        percentComplete={progress} />\r\n      <NavigationBar\r\n        currentItemNo={session.currentItemNo}\r\n        sessionDispatch={props.sessionDispatch}/>\r\n      <Separator></Separator>\r\n      <AssignmentList\r\n        sessionDispatch={props.sessionDispatch}\r\n        items={assign_items} />\r\n    </Stack>\r\n  )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { User, SenseAnnotSession, Assignments, Annotations, Assignment } from \"../datatypes\"\r\nimport { Stack } from '@fluentui/react';\r\nimport { LoginStatus } from './LoginStatus';\r\nimport { SessionInfo } from './SessionInfo';\r\nimport { Tasks } from './Tasks';\r\nimport { SessionDispatch } from '../SenseAnnot/sessionUtils/sessionReducer';\r\n\r\nexport interface IControllerData {\r\n  user: User | null;\r\n  session: SenseAnnotSession | null;\r\n  assignments: Assignments;\r\n  annotations: Annotations;\r\n  sessionDispatch: SessionDispatch\r\n  login_fn: () => void;\r\n  logout_fn: () => void;\r\n}\r\n\r\nfunction Controller(props: IControllerData) {\r\n\r\n  return (\r\n\r\n    <Stack tokens={{ childrenGap: 5, padding: 10 }}>\r\n      <LoginStatus user={props.user} login_fn={props.login_fn} logout_fn={props.logout_fn} />\r\n      <SessionInfo session={props.session}></SessionInfo>\r\n      <Tasks\r\n        session={props.session}\r\n        assignments={props.assignments}\r\n        annotations={props.annotations}\r\n        sessionDispatch={props.sessionDispatch}\r\n        ></Tasks>\r\n    </Stack>\r\n  )\r\n}\r\n\r\n\r\nexport default Controller;","import React from 'react';\r\nimport { PretaggedToken } from '../datatypes';\r\nimport { Stack, mergeStyles, IStyle } from '@fluentui/react';\r\nimport './token.css';\r\n\r\nexport interface ITokenProps {\r\n  token: PretaggedToken;\r\n  isFocus?: boolean;\r\n  simplified?: boolean;\r\n}\r\n\r\nexport function Token(props: ITokenProps) {\r\n  let { token, isFocus } = props;  \r\n  let posStyle = { fontSize: \"10pt\" };\r\n\r\n  let pos = props.token[1].endsWith(\"CATEGORY\")?\r\n    \"\\u3000\":props.token[1];\r\n\r\n  return (\r\n    <Stack horizontalAlign=\"center\" className={isFocus ? \"focus-token\" : \"\"}>      \r\n      {/* POS */}\r\n      <div style={posStyle}>{props.simplified? \"\\u3000\": pos}</div>\r\n      <div\r\n        style={{fontSize: \"large\", whiteSpace: \"nowrap\"}}\r\n        title={`${token[2]}:${token[3]}`}>\r\n        {token[0]}\r\n      </div> {/* Word */}\r\n    </Stack>\r\n  )\r\n}","import React from 'react';\r\nimport { PretaggedToken } from '../datatypes';\r\nimport { Token } from './Token';\r\nimport { Stack } from '@fluentui/react';\r\n\r\nexport interface ISentenceViewerData {\r\n  preContext?: PretaggedToken[]\r\n  sentence: PretaggedToken[];\r\n  postContext?: PretaggedToken[]\r\n  itemId: string;\r\n}\r\n\r\nfunction SentenceViewer(props: ISentenceViewerData) {\r\n  let sentence = props.sentence;\r\n  let itemId = props.itemId;\r\n\r\n  if (sentence === undefined) {\r\n    return null;\r\n  } else {\r\n    let tokenId = -1;\r\n    try {\r\n      tokenId = parseInt(itemId.split(\":\")[1]);\r\n    } catch (err) {\r\n      //pass\r\n    }\r\n\r\n    const preContextElems = props.preContext ?\r\n      props.preContext.map((token, index) => {\r\n        return (<Token token={token} simplified></Token>)\r\n      }) : null;\r\n\r\n    const postContextElems = props.postContext ?\r\n      props.postContext.map((token, index) => {\r\n        return (<Token token={token} simplified></Token>)\r\n      }) : null;\r\n\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"mx-auto mt-4\">\r\n          <div className=\"card-body bg-light p-3 mb-3 border border-primary rounded-lg\">\r\n            <Stack horizontal horizontalAlign=\"center\" tokens={{ childrenGap: 3 }}\r\n              styles={{root: {padding: \"12pt 0\", overflowX: \"auto\"}}}>\r\n              {preContextElems}\r\n              {sentence.map((token, index) => {\r\n                let isFocus = tokenId == index;\r\n                return (<Token token={token} isFocus={isFocus}></Token>)\r\n              })}\r\n              {postContextElems}\r\n            </Stack>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SentenceViewer;","import * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport {User} from \"../datatypes\"\r\n\r\nfunction transformUser(user_raw: firebase.User): User{\r\n  let empty = (x: string|null) => {return x? x: \"\"};\r\n  let user = {\r\n    name: empty(user_raw.displayName),\r\n    email: empty(user_raw.email),\r\n    photoUrl: empty(user_raw.photoURL),\r\n    uid: empty(user_raw.uid)\r\n  }\r\n  return user;\r\n}\r\nexport async function login() {\r\n  console.log(\"login function called\");\r\n  let provider = new firebase.auth.GoogleAuthProvider();\r\n  try {\r\n    const result = await firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n                    .then(()=>{\r\n                      return firebase.auth().signInWithPopup(provider);\r\n                    });\r\n    \r\n    if (result.credential) {\r\n      let token = (result.credential as firebase.auth.OAuthCredential).accessToken;\r\n      let user: User|null = null;      \r\n      let user_raw = result.user;\r\n      if (user_raw){        \r\n        user = transformUser(user_raw);\r\n      }\r\n      return user;      \r\n    }\r\n  }\r\n  catch (error) {\r\n    console.debug(error);\r\n  }\r\n}\r\n\r\nexport function logout() {\r\n  firebase.auth().signOut();\r\n}\r\n\r\nexport function subscribeLoginStatus(\r\n    signed_in: ((user: User)=>void), \r\n    not_signed_in: (()=>void)) {\r\n  firebase.auth().onAuthStateChanged((raw_user)=>{\r\n    if(raw_user){\r\n      let user = transformUser(raw_user);\r\n      signed_in(user);\r\n    } else {\r\n      not_signed_in();\r\n    }\r\n  })\r\n}","import { SenseAnnotSession, User, Assignments, Annotations, PretaggedSentence, PretaggedToken, SenseTree, SenseRevision, Annotation, Assignment } from \"../datatypes\";\r\nimport { CwnSense } from \"../datatypes\";\r\nimport { object } from \"prop-types\";\r\nimport firebase from \"firebase\";\r\nimport { makeNewSenseTree } from \"../SenseSorter/sorter_utils\";\r\n\r\n\r\n\r\nexport async function fetchSenses(lemma: string): Promise<CwnSense[]> {\r\n  let db = firebase.firestore();\r\n  let doc = await db.collection(\"senses\").doc(lemma).get();\r\n\r\n  if (doc.exists) {\r\n    let data = doc.data() as {lemma: string, senses: CwnSense[]};\r\n    return data.senses;\r\n  } else {\r\n    throw new Error(\"Cannot find lemma \" + lemma);\r\n  }\r\n}\r\n\r\n\r\nexport async function fetchSession(user: User)\r\n  : Promise<SenseAnnotSession | null> {\r\n  let db = firebase.firestore();    \r\n  let doc = await db.collection(\"sessions\").doc(user.uid).get();\r\n  if (doc.exists) {\r\n    return doc.data() as SenseAnnotSession;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\n\r\nexport async function fetchAssignments(user: User)\r\n  : Promise<Assignments> {\r\n  let db = firebase.firestore();\r\n  let query = await db.collection(\"assignments\")\r\n    .where(\"annotatorId\", \"==\", user.uid).get();\r\n  let assignments: Assignments = []\r\n  query.forEach((doc) => {\r\n    assignments.push(doc.data() as Assignment);\r\n  });\r\n  return assignments;\r\n}\r\n\r\nexport async function fetchAnnotations(user: User)\r\n  : Promise<Annotations> {\r\n  let db = firebase.firestore();\r\n  let query = await db.collection(\"annotations\")\r\n    .where(\"annotatorId\", \"==\", user.uid).get();\r\n  let annotations: Annotations = {};\r\n  query.forEach((doc) => {\r\n    let annot = doc.data() as Annotation;\r\n    annotations[annot.assignId] = annot;\r\n  });\r\n  return annotations;\r\n}\r\n\r\n\r\nexport async function fetchSentence(sentenceId: string)\r\n  : Promise<PretaggedToken[]> {\r\n  let db = firebase.firestore();\r\n\r\n  let doc = await db.collection(\"sentences\").doc(sentenceId).get();\r\n  if (doc.exists) {\r\n    let data = doc.data()! as { sid: string, tokens: string[] };\r\n    let tokens = (data.tokens as string[])\r\n      .map((x) => x.split(\"::\")) as PretaggedToken[];\r\n    return tokens;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function fetchSenseTree(userEmail: string, lemma: string)\r\n  : Promise<SenseTree | null> {\r\n\r\n  let db = firebase.firestore();\r\n  let treeId = `${userEmail}-${lemma}`;\r\n  let senseTree = null;\r\n\r\n  let doc = await db.collection(\"senseTrees\").doc(treeId).get();\r\n  if (doc.exists) {\r\n    senseTree = doc.data() as SenseTree;\r\n  }\r\n\r\n  return senseTree;\r\n}\r\n","import { SenseTreeNode, SenseTreePath, CwnSense, SenseTree } from \"../datatypes\";\r\nimport { IGroup, getParent } from \"@fluentui/react\";\r\nimport { chown } from \"fs\";\r\n\r\n\r\nexport interface GroupedSenses {\r\n  senses: CwnSense[];\r\n  groups: IGroup[];\r\n}\r\n\r\nexport function countLeaves(node: SenseTreeNode) {\r\n  if (node.children.length > 0) {\r\n    let count: number = node.children\r\n      .map((x) => x.node_type === \"group\" ? countLeaves(x) : 1)\r\n      .reduce((sum, x) => sum + x, 0);\r\n    return count;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nexport function toGroup(node: SenseTreeNode, depth = 0) {\r\n\r\n  let group_members = node.children\r\n    .filter((x) => x.node_type === \"group\")\r\n    .map((x) => toGroup(x, depth + 1))\r\n\r\n\r\n  let group = {\r\n    key: node.node_id,\r\n    name: node.title,\r\n    data: {\r\n      tag: node.tag,\r\n      description: node.description,\r\n      allCount: countLeaves(node)\r\n    },\r\n    level: depth,\r\n    children: group_members\r\n  } as IGroup;\r\n\r\n  return group;\r\n}\r\n\r\nexport function findNode(rootNode: SenseTreeNode,\r\n  predicate: (node: SenseTreeNode) => boolean): SenseTreeNode | null {\r\n\r\n  const nodeList = findNodes(rootNode, predicate);\r\n  const node = nodeList.length > 0 ? nodeList[0] : null;\r\n\r\n  return node;\r\n\r\n}\r\n\r\nexport function findNodes(rootNode: SenseTreeNode,\r\n  predicate: (node: SenseTreeNode) => boolean): SenseTreeNode[] {\r\n\r\n  let nodeTraces = findNodeTrace(rootNode, predicate);\r\n  let nodes = nodeTraces.map((path) => {\r\n    return path[path.length - 1]\r\n  });\r\n  return nodes;\r\n}\r\n\r\nfunction findNodeTrace(\r\n  rootNode: SenseTreeNode,\r\n  predicate: (node: SenseTreeNode) => boolean): SenseTreePath[] {\r\n\r\n  let buf: [SenseTreeNode, SenseTreePath][] = [[rootNode, []]];\r\n  let results: SenseTreePath[] = [];\r\n  while (buf.length > 0) {\r\n    const [cur_node, path] = buf.pop() as [SenseTreeNode, SenseTreePath];\r\n    const cur_path = [...path, cur_node];\r\n    if (predicate(cur_node)) {\r\n      results.push(cur_path);\r\n    }\r\n\r\n    cur_node.children.map((x) => buf.push([x, cur_path]));\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nexport function findParent(\r\n  rootNode: SenseTreeNode, target: SenseTreeNode): SenseTreeNode | null {\r\n  let paths = findNodeTrace(rootNode, (x) => x == target);\r\n  if (paths.length && paths[0].length > 1) {\r\n    return paths[0][paths[0].length - 2];\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function moveNode(\r\n  root: SenseTreeNode,\r\n  srcNode: SenseTreeNode,\r\n  tgtNode: SenseTreeNode): SenseTreeNode {\r\n\r\n  let newRoot = Object.assign({}, root);\r\n  const tgtParent = findParent(root, tgtNode)\r\n  const srcParent = findParent(root, srcNode);\r\n\r\n  // debugger;\r\n  if (tgtNode.node_type === \"group\") {\r\n    // it is a group node\r\n    if (srcParent) {\r\n      // remove srcNode from its parent\r\n      const srcIndex = srcParent.children.indexOf(srcNode);\r\n      srcParent.children.splice(srcIndex, 1);\r\n\r\n      tgtNode.children.push(srcNode);\r\n    }\r\n  } else {\r\n    // it is a leaf(sense) node    \r\n\r\n    if (tgtParent && srcParent) {\r\n      // remove srcNode from its parent      \r\n      const srcIndex = srcParent.children.indexOf(srcNode);\r\n      srcParent.children.splice(srcIndex, 1);\r\n\r\n      // add srcNode to tgtParent\r\n      const nodeList = tgtParent.children;\r\n      const tgtIndex = nodeList.indexOf(tgtNode);\r\n      let newNodeList = [\r\n        ...nodeList.slice(0, tgtIndex + 1),\r\n        srcNode,\r\n        ...nodeList.slice(tgtIndex + 1, nodeList.length)]\r\n      tgtParent.children = newNodeList;\r\n    }\r\n\r\n  }\r\n\r\n\r\n  return newRoot;\r\n}\r\n\r\ntype LeafTuple = { node: SenseTreeNode, parent: SenseTreeNode | null };\r\nexport function getLeaves(\r\n  node: SenseTreeNode, parent: SenseTreeNode | null = null):\r\n  LeafTuple[] {\r\n  if (node.children.length > 0) {\r\n    return node.children.map((x) => getLeaves(x, node)).flat();\r\n  } else {\r\n    return [{ node, parent }];\r\n  }\r\n}\r\n\r\nexport function getGroupedSenses(\r\n  node: SenseTreeNode,\r\n  ref_senses: CwnSense[],\r\n  filterText?: string): GroupedSenses {\r\n\r\n  type SenseTuple = { sense: CwnSense, parent: SenseTreeNode | null };  \r\n  const leaf_nodes = getLeaves(node);\r\n\r\n  const sense_nodes = leaf_nodes\r\n    .map((x) => {\r\n      const idx = ref_senses\r\n        .map((x) => x.cwn_id)\r\n        .indexOf(x.node.node_id)\r\n      let sense_x = null;\r\n      if (idx >= 0) {\r\n        sense_x = ref_senses[idx];\r\n      }\r\n      return { sense: sense_x, parent: x.parent } as SenseTuple;\r\n    })\r\n    .filter((x) => !!x.sense)\r\n    .filter((x) => !filterText || x.sense.cwn_id.indexOf(filterText) >= 0);\r\n\r\n  const items = sense_nodes.map((x) => x.sense);\r\n  const parents = sense_nodes.map((x) => x.parent);\r\n  const group_map = items.reduce((obj, item_x, i) => {\r\n    const parent_x = parents[i];\r\n    const parent_id = parent_x ? parent_x.node_id : \"__null__\";\r\n    obj[parent_id] = [...obj[parent_id] || [], item_x];\r\n    return obj;\r\n  }, {} as { [key: string]: CwnSense[] })\r\n\r\n  const out_items = Object.values(group_map).flat();\r\n  const out_groups = Object.keys(group_map).map((node_id: string) => {\r\n    let values = group_map[node_id];\r\n    let groupNode = findNode(node, (x) => x.node_id === node_id);\r\n    let groupTitle = (groupNode?.title) ? (groupNode?.title) : node_id;\r\n\r\n    return {\r\n      count: values.length,\r\n      startIndex: out_items.indexOf(values[0]),\r\n      key: node_id,\r\n      name: groupTitle,\r\n      data: parents.filter((x) => x && (x.node_id == node_id))[0],\r\n      level: 0\r\n    } as IGroup\r\n  });\r\n\r\n  return { senses: out_items, groups: out_groups } as GroupedSenses;\r\n}\r\n\r\nexport function makeSenseTreeGroupNode(title: string = \"\") {\r\n  return {\r\n    node_id: `group-${Date.now()}`,\r\n    description: \"\",\r\n    node_type: \"group\",\r\n    title: title.length > 0 ? title : \"New Group\",\r\n    tag: \"\",\r\n    children: []\r\n  } as SenseTreeNode;\r\n}\r\n\r\nexport function makeSenseTreeSenseNode(sense: CwnSense) {\r\n  return {\r\n    node_id: sense.cwn_id,\r\n    description: \"\",\r\n    node_type: \"sense\",\r\n    title: `(${sense.pos})${sense.definition}`,\r\n    tag: \"\",\r\n    children: []\r\n  } as SenseTreeNode;\r\n}\r\n\r\nexport function checkSenseTree(senseTree: SenseTree, senses: CwnSense[]) {\r\n  const root = senseTree.root;\r\n  const senseNodeIds = getLeaves(root)\r\n    .filter((x) => x.node.node_type == \"sense\")\r\n    .map((x) => x.node.node_id);\r\n  \r\n  let orphanSenses = senses.filter((x) => senseNodeIds.indexOf(x.cwn_id) < 0)\r\n  if (orphanSenses.length > 0) {\r\n    let orphanGroup = makeSenseTreeGroupNode(\"未歸類\");\r\n    orphanGroup.children = orphanSenses.map(makeSenseTreeSenseNode);\r\n    root.children.push(orphanGroup);\r\n  }\r\n\r\n  return senseTree;\r\n}\r\n\r\nexport function removeGroupNode(root: SenseTreeNode, node: SenseTreeNode) {\r\n  const children = node.children;\r\n  const parent = findParent(root, node);\r\n  if (parent) {\r\n    root.children.push(...children);\r\n    parent.children = parent.children.filter((x) => x !== node);\r\n  }\r\n  return root;\r\n\r\n}\r\n\r\nexport function addGroupNode(root: SenseTreeNode) {\r\n  let newNode = makeSenseTreeGroupNode();\r\n  root.children.unshift(newNode);\r\n  return root;\r\n}","import { SenseRevision, Trial, CwnSense, SenseTree, Annotations } from \"../datatypes\";\r\nimport { findNodes, getLeaves, makeSenseTreeGroupNode } from \"./tree_utils\";\r\n\r\n\r\nexport function getSenseRevision(\r\n  trial: Trial, annotations: Annotations) {\r\n\r\n  const itemId = trial.itemId;\r\n  const assignId = trial.assignId;\r\n  let revision = null;\r\n  \r\n  if (assignId && itemId) {\r\n    let annot = annotations[assignId];\r\n    if (annot && itemId in annot.results) {\r\n      revision = annot.results[itemId];\r\n    }\r\n  }\r\n\r\n  if(revision === null){\r\n    revision = makeNewSenseRevision(trial);\r\n  }\r\n  \r\n  return revision;\r\n}\r\n\r\nexport function makeNewSenseRevision(trial: Trial): SenseRevision {\r\n  const revision = {\r\n    annotator: trial.userEmail,\r\n    timestamp: Date.now(),\r\n    assignId: trial.assignId,\r\n    itemId: trial.itemId,\r\n    candidates: [],\r\n    probs: []\r\n  };\r\n\r\n  return revision;\r\n}\r\n\r\nexport function cloneSenseRevision(\r\n  revision: SenseRevision,\r\n  candidates?: string[], probs?: number[]): SenseRevision {\r\n  let newRevision = Object.assign({}, revision);\r\n  newRevision.timestamp = Date.now();\r\n  if (candidates) {\r\n    newRevision.candidates = candidates;\r\n  }\r\n  if (probs) {\r\n    newRevision.probs = probs;\r\n  } else {\r\n    newRevision.probs = newRevision.candidates\r\n      .map((x) => 1 / (newRevision.candidates.length));\r\n  }\r\n  \r\n  return newRevision;\r\n};\r\n\r\n\r\nexport function makeNewSenseTree(trial: Trial): SenseTree {\r\n  let senseTree = {\r\n    annotator: trial.userEmail,\r\n    annotatorId: trial.userId,\r\n    timestamp: Date.now(),\r\n    lemma: trial.token[0],\r\n    root: makeSenseTreeGroupNode(`「${trial.token[0]}」的詞意`)\r\n  } as SenseTree;\r\n\r\n  return senseTree;\r\n}\r\n\r\nfunction findSense(cwn_id: string, senses: CwnSense[]) {\r\n  let index = senses.map((x) => x.cwn_id).indexOf(cwn_id);\r\n\r\n  if (index < 0) {\r\n    return null;\r\n  } else {\r\n    return senses[index];\r\n  }\r\n}\r\n\r\nexport function parseFilter(filter: string, senses: CwnSense[], senseTree: SenseTree | null) {\r\n\r\n  const tokens = filter.split(\">>\");\r\n  const filterStr = tokens[0];\r\n\r\n  let serial = -1;\r\n  if (tokens.length > 1) {\r\n    serial = parseInt(tokens[1]) ? parseInt(tokens[1]) : -1;\r\n  }\r\n\r\n  let senseInGroups: CwnSense[] = [];\r\n  if (senseTree) {\r\n    //debugger;\r\n    let groups = findNodes(senseTree.root,\r\n      (x) => x.node_type == \"group\" &&\r\n        ((x.title.indexOf(filterStr) >= 0) || x.tag?.indexOf(filterStr) >= 0));\r\n    senseInGroups = groups.map((x) => getLeaves(x))\r\n      .flatMap((leafs) => leafs\r\n        .filter((leaf) => leaf.node.node_type == \"sense\")\r\n        .map((leaf) => findSense(leaf.node.node_id, senses)))\r\n      .filter((x) => x !== null) as CwnSense[];\r\n  }\r\n\r\n  console.log(\"senseInGroups\", senseInGroups);\r\n  if (senseInGroups.length > 0) {\r\n    return serial >= 0 ? [senseInGroups[serial]] : senseInGroups;\r\n  } else {    \r\n    const filteredSenses = senses.filter((x) => {\r\n      return x.cwn_id.startsWith(filterStr) || x.pos.startsWith(filterStr)\r\n    });    \r\n    console.log(\"filteredSenses\", filteredSenses);\r\n    return filteredSenses;\r\n  }\r\n}\r\n\r\n","import { User, PretaggedToken, SenseRevision, CwnSense, SenseTree, Trial, Annotations } from \"../datatypes\";\r\nimport { fetchAnnotations, fetchSenses } from \"../DataHandler\";\r\nimport { fetchSenseTree } from \"../DataHandler/getData\";\r\nimport { makeNewSenseTree } from \"./sorter_utils\";\r\n\r\ntype StateSetter<T> = React.Dispatch<React.SetStateAction<T>>\r\n\r\nexport async function updateSenses(\r\n  trial: Trial,\r\n  senseSetter: StateSetter<CwnSense[]>)\r\n  : Promise<CwnSense[]> {\r\n\r\n  let token = trial.token;\r\n  let senses = [] as CwnSense[];\r\n  if (token) {\r\n    let lemma = token[0];\r\n    try {\r\n      senses = await fetchSenses(lemma);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n  senseSetter(senses);\r\n  return senses;\r\n}\r\n\r\nexport async function initSenseTree(\r\n  trial: Trial) {\r\n\r\n\r\n  let senseTree: SenseTree | null = null;\r\n  if (trial && trial.token) {\r\n    const userEmail = trial.userEmail;\r\n    const token = trial.token;\r\n    const lemma = token[0];\r\n\r\n    try {\r\n      senseTree = await fetchSenseTree(userEmail, lemma);\r\n    } catch (err) {\r\n      // console.error(err);\r\n    }\r\n\r\n    if (senseTree === null) {\r\n      senseTree = makeNewSenseTree(trial);\r\n    }\r\n  }\r\n  return senseTree;\r\n}\r\n\r\n","import React, { useRef } from 'react';\r\nimport { TooltipHost, TooltipDelay, DirectionalHint, Persona, PersonaInitialsColor, PersonaSize } from '@fluentui/react';\r\nimport { CwnSense } from '../datatypes';\r\nimport { useDrag, useDrop } from 'react-dnd';\r\n\r\nexport interface ISenseItemData {\r\n  sense: CwnSense;\r\n  index: number;  \r\n  onDragAndDrop: (srcSenseId: string, tgtSenseId: string)=>void;\r\n  onClick: ()=>void;\r\n}\r\n\r\nexport interface SenseDragItem {\r\n  type: \"leaf-node\",\r\n  senseId: string;\r\n}\r\n\r\nfunction examplesTooltips(examples: string[]) {\r\n  return {\r\n    onRenderContent: () => {\r\n      return (<ul>\r\n        {examples.map((x) => (\r\n          <li key={x.substr(0, 5)+x.length.toString()}>{x}</li>))}\r\n      </ul>)\r\n    }\r\n  }\r\n}\r\n\r\nexport function SenseItem(props: ISenseItemData) {\r\n  const { sense, index } = props;\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  const [{}, drag] = useDrag({\r\n    item: { type: \"leaf-node\", senseId: sense.cwn_id },\r\n    collect: (monitor) => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  const [{}, drop] = useDrop({\r\n    accept: \"leaf-node\",\r\n    drop: (item: SenseDragItem, monitor) => {\r\n      // console.log(item, monitor);\r\n      props.onDragAndDrop(item.senseId, sense.cwn_id);\r\n    },\r\n\r\n    canDrop: (item, monitor) => {\r\n      return true;\r\n    },\r\n  });\r\n\r\n  drag(drop(ref));\r\n  if (sense && index !== undefined) {\r\n    return (\r\n      <div ref={ref}>\r\n        <TooltipHost\r\n          tooltipProps={examplesTooltips(sense.examples)}\r\n          id={\"tp\" + sense.cwn_id}\r\n          delay={TooltipDelay.long}\r\n          directionalHint={DirectionalHint.rightCenter}\r\n        >\r\n          <Persona\r\n            key={`sense-item-${sense.cwn_id}`}\r\n            imageInitials={sense.pos}\r\n            initialsColor={(index % 6) as PersonaInitialsColor}\r\n            text={sense.definition}\r\n            secondaryText={sense.examples[0]}\r\n            size={PersonaSize.size32}            \r\n            showSecondaryText={true}\r\n            onClick={props.onClick}            \r\n            styles={{\r\n              root: { marginTop: \"7px\", userSelect: \"none\" },\r\n              primaryText: { fontSize: \"11pt\", userSelect: \"none\" },\r\n              secondaryText: { fontSize: \"8pt\", color: \"gray\", userSelect: \"none\" }\r\n            }}\r\n          />\r\n        </TooltipHost>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (<div></div>)\r\n  }\r\n\r\n}\r\nexport default SenseItem;","import React, { useState } from 'react';\r\nimport { CwnSense, SenseTree, SenseTreePath, SenseRevision } from '../datatypes';\r\nimport { Selection, SelectionMode, List, Persona, PersonaSize, PersonaInitialsColor, TooltipHost, DirectionalHint, TooltipDelay, IGroup, GroupedList, Breadcrumb, Stack, TextField } from '@fluentui/react';\r\nimport { GroupedSenses, findNode, moveNode, findNodes } from './tree_utils';\r\nimport SenseItem from './SenseItem';\r\nimport { cloneSenseRevision } from './sorter_utils';\r\n\r\nexport interface ISenseListProps {\r\n  senseTree: SenseTree | null;\r\n  groupedSenses: GroupedSenses;\r\n  senseRevision: SenseRevision;\r\n  onSenseTreeUpdated: (tree: SenseTree) => void;\r\n  onSenseRevisionUpdated: (revision: SenseRevision) => void;\r\n}\r\n\r\nlet selectionModel = new Selection({\r\n  onSelectionChanged: () => {\r\n    console.log(selectionModel.getSelection());\r\n  }\r\n});\r\n\r\n\r\nexport function SenseList(props: ISenseListProps) {\r\n  let senses: CwnSense[] = [];\r\n  let groups: IGroup[] = [];\r\n  const [senseFilter, setSenseFilter] = useState<string | null>(null);\r\n\r\n  if (Object.keys(props.groupedSenses).length > 0) {\r\n    senses = props.groupedSenses.senses;\r\n    groups = props.groupedSenses.groups;\r\n  }\r\n\r\n  function onSenseDragAndDrop(srcSenseId: string, tgtSenseId: string) {\r\n    const senseTree = props.senseTree;\r\n    if (senseTree) {\r\n      const srcNode = findNode(senseTree.root, (x) => x.node_id == srcSenseId);\r\n      const tgtNode = findNode(senseTree.root, (x) => x.node_id == tgtSenseId);\r\n\r\n      if (srcNode && tgtNode) {\r\n        const newRoot = moveNode(senseTree.root, srcNode, tgtNode);\r\n        const newTree = Object.assign({}, senseTree);\r\n        newTree.timestamp = Date.now();\r\n        newTree.root = newRoot;\r\n        props.onSenseTreeUpdated(newTree);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  const onSenseSelected = (sense: CwnSense) => {\r\n    const senseRevision = props.senseRevision;\r\n\r\n    console.log(\"onSenseSelected (senseRevision): \", senseRevision);\r\n    let candidates = senseRevision.candidates;\r\n    if (senseRevision.candidates.indexOf(sense.cwn_id) < 0) {\r\n      candidates.push(sense.cwn_id);\r\n      const newRevision = cloneSenseRevision(senseRevision,\r\n        candidates = candidates);\r\n      props.onSenseRevisionUpdated(newRevision);\r\n    }\r\n  }\r\n\r\n  function renderCell(nestingDepth?: number,\r\n    sense?: CwnSense, index?: number) {\r\n\r\n    if (sense && index !== undefined) {\r\n\r\n\r\n      return (\r\n        <SenseItem\r\n          sense={sense} index={index}\r\n          onDragAndDrop={onSenseDragAndDrop}\r\n          onClick={() => onSenseSelected(sense)}\r\n        />\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Stack>\r\n      <div\r\n        id=\"unique-sense-list-id\"\r\n        ref={null/*drop*/}\r\n        style={{\r\n          height: \"500px\",\r\n          overflowX: \"hidden\", overflowY: \"scroll\"\r\n        }}>\r\n        <GroupedList\r\n          items={senses}\r\n          groups={groups}\r\n          onRenderCell={renderCell}\r\n          compact={true}\r\n          selectionMode={SelectionMode.none}\r\n          groupProps={\r\n            { showEmptyGroups: true }\r\n          }\r\n        />\r\n      </div>\r\n    </Stack>\r\n  )\r\n}","import React, { useState } from \"react\";\r\nimport { FocusTrapCallout, Stack, Label, TextField, mergeStyleSets, Button, PrimaryButton } from \"@fluentui/react\";\r\n\r\nexport interface IGroupInfo {\r\n  title: string;\r\n  tag: string;\r\n}\r\n\r\nexport interface IGroupInfoEditProps {\r\n  elemId: string;\r\n  groupInfo: IGroupInfo;\r\n  onGroupInfoUpdate: (info: IGroupInfo) => void;\r\n  onDismiss: () => void;\r\n}\r\n\r\nexport function GroupInfoEdit(props: IGroupInfoEditProps) {\r\n  const [groupInfo, setGroupInfo] = useState(props.groupInfo);\r\n\r\n  const styles = mergeStyleSets({\r\n    root: { padding: \"5%\" },\r\n    label: { width: \"60px\", margin: \"1% 0%\" },\r\n    textInput: {}\r\n  })\r\n\r\n  const onSave = () => {\r\n    setGroupInfo(groupInfo);\r\n    props.onGroupInfoUpdate(groupInfo);\r\n    props.onDismiss();\r\n  }\r\n\r\n  return (\r\n    <FocusTrapCallout\r\n      role=\"alertdialog\"\r\n      gapSpace={0}\r\n      target={`#${props.elemId}`}\r\n      onDismiss={props.onDismiss}\r\n      setInitialFocus\r\n    >\r\n      <Stack className={styles.root}>\r\n        <Stack horizontal>\r\n          <Label className={styles.label}>Title</Label>\r\n          <TextField className={styles.textInput}\r\n            onChange={(ev, newvalue) => setGroupInfo({ ...groupInfo, title: newvalue ? newvalue : \"\" })}\r\n            defaultValue={groupInfo.title}></TextField>\r\n        </Stack>\r\n        <Stack horizontal>\r\n          <Label className={styles.label}>Tag</Label>\r\n          <TextField className={styles.textInput}\r\n            onChange={(ev, newvalue) => setGroupInfo({ ...groupInfo, tag: newvalue ? newvalue : \"\" })}\r\n            defaultValue={groupInfo.tag}></TextField>\r\n        </Stack>\r\n        <Stack horizontal horizontalAlign=\"end\" tokens={{ childrenGap: \"10px\" }}\r\n          styles={{ root: { paddingTop: \"16px\" } }}>\r\n          <Button onClick={props.onDismiss}>Cancel</Button>\r\n          <PrimaryButton onClick={onSave}>Save</PrimaryButton>\r\n        </Stack>\r\n      </Stack>\r\n\r\n    </FocusTrapCallout>\r\n  )\r\n}\r\n\r\n","import { useDrop, useDrag } from \"react-dnd\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { Link, IGroupHeaderProps, IconButton, Stack, IGroup } from \"@fluentui/react\";\r\nimport { SenseDragItem } from \"./SenseItem\";\r\nimport { GroupInfoEdit, IGroupInfo } from \"./GroupInfoEdit\";\r\n\r\ninterface GroupDragItem {\r\n  type: \"group-node\";\r\n  nodeId: string;\r\n}\r\n\r\nexport interface GroupHeaderDndHandler {\r\n  onDragAndDrop: (srcNodeId: string, tgtNodeId: string) => void;\r\n  onGroupHeaderUpdate: (groupInfo: IGroupInfo) => void;\r\n  onDeleteGroup: (group: IGroup) => void;\r\n  deleteState: boolean;\r\n}\r\n\r\nexport function SenseTreeGroupHeader(props: IGroupHeaderProps & GroupHeaderDndHandler) {\r\n  const toggleCollapse = (): void => {\r\n    props.onToggleCollapse!(props.group!);\r\n  };\r\n\r\n  const [editVisibility, setEditVisibility] = useState(false);\r\n  const toggleEditVisibility = () => {\r\n    setEditVisibility(!editVisibility);\r\n  }  \r\n\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  const [{ isOver, canDrop }, drop] = useDrop({\r\n    accept: [\"group-node\", \"leaf-node\"],\r\n    drop: (item: GroupDragItem | SenseDragItem, monitor) => {\r\n      let groupNodeId = props.group!.key;\r\n      if (item.type == \"group-node\") {\r\n        props.onDragAndDrop(item.nodeId, groupNodeId);\r\n      } else {\r\n        props.onDragAndDrop(item.senseId, groupNodeId);\r\n      }\r\n\r\n    },\r\n    canDrop: (item, monitor) => {\r\n      if (item.type == \"leaf-node\"){\r\n        return true;\r\n      } else {\r\n        return item.nodeId != props.group!.key;\r\n      }\r\n      \r\n    },\r\n  });\r\n\r\n  const [{ isDragging }, drag, preview] = useDrag({\r\n    item: { type: \"group-node\", nodeId: props.group!.key },\r\n    collect: (monitor) => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  if (props.group) {\r\n    drag(drop(ref));\r\n\r\n    const groupInfo = { title: props.group.name, tag: props.group.data.tag }\r\n    const tag = groupInfo.tag;\r\n    let groupButton = null;\r\n    if (props.group.isCollapsed) {\r\n      groupButton = (<IconButton onClick={toggleCollapse} iconProps={{ iconName: \"ChevronDown\" }} title=\"展開\" />)\r\n    } else {\r\n      groupButton = (<IconButton onClick={toggleCollapse} iconProps={{ iconName: \"ChevronRight\" }} title=\"收起\" />)\r\n    }\r\n\r\n    let allCount = props.group.data.allCount;\r\n    let countStr = allCount || allCount === 0 ? `(${props.group.data.allCount})` : \"\";\r\n    let deleteButton = props.deleteState ? (\r\n      <IconButton iconProps={{ iconName: \"Delete\" }}\r\n        onClick={()=>props.onDeleteGroup(props.group!)} />\r\n      ) : null;\r\n\r\n    let editCallout = editVisibility ? (\r\n      <GroupInfoEdit\r\n        elemId={`group-header-${props.group.key}`}\r\n        groupInfo={groupInfo}\r\n        onDismiss={toggleEditVisibility}\r\n        onGroupInfoUpdate={props.onGroupHeaderUpdate}></GroupInfoEdit>) : null;\r\n\r\n    return (\r\n      <div ref={ref} className=\"d-flex p-1 align-items-baseline user-select-none\"\r\n        style={{ marginLeft: props.groupLevel! * 20 }}>\r\n        {editCallout}\r\n        {groupButton}\r\n        <Stack\r\n          id={`group-header-${props.group.key}`}\r\n          horizontal\r\n          verticalAlign=\"baseline\"\r\n          horizontalAlign=\"space-between\"\r\n          onClick={() => props.onGroupHeaderClick!(props.group!)}\r\n          onDoubleClick={() => toggleEditVisibility()}>\r\n          {deleteButton}\r\n          {(tag && tag.length > 0)?\r\n            <h6><span className=\"badge bg-primary\">{tag}</span>&nbsp;</h6>:null }\r\n          <h6>{props.group.name} {countStr}</h6>\r\n        </Stack>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (<div></div>)\r\n  }\r\n}","import React, { useState } from 'react';\r\nimport { SenseTree, SenseTreeNode } from '../datatypes';\r\nimport { Depths } from '@uifabric/fluent-theme/lib/fluent/FluentDepths'\r\nimport { GroupedList, SelectionMode, IGroup, IGroupHeaderProps, Stack, IconButton } from '@fluentui/react';\r\nimport { toGroup, findNode, moveNode, removeGroupNode, addGroupNode } from './tree_utils';\r\nimport { SenseTreeGroupHeader } from './SenseTreeGroupHeader';\r\nimport { IGroupInfo } from './GroupInfoEdit';\r\n\r\nexport interface ISenseTreeViewProps {\r\n  senseTree: SenseTree | null;\r\n  onSenseTreeUpdated: (tree: SenseTree | null) => void;\r\n  onSelectedNodeUpdated: (node: SenseTreeNode | null) => void;\r\n}\r\n\r\n\r\n\r\nexport function SenseTreeView(props: ISenseTreeViewProps) {\r\n  let senseTree = props.senseTree;\r\n  const [deleteState, setDeleteState] = useState(false);\r\n\r\n  const onRenderCell = (nestingDepth?: number, item?: SenseTreeNode, itemIndex?: number): JSX.Element => {\r\n    return (<div></div>);\r\n  }\r\n\r\n  const onGroupHeaderDrangAndDrop = (srcNodeId: string, tgtNodeId: string) => {\r\n    const senseTree = props.senseTree;\r\n    if (senseTree) {\r\n      const srcNode = findNode(senseTree.root, (x) => x.node_id == srcNodeId);\r\n      const tgtNode = findNode(senseTree.root, (x) => x.node_id == tgtNodeId);\r\n\r\n      if (srcNode && tgtNode) {\r\n        const newRoot = moveNode(senseTree.root, srcNode, tgtNode);\r\n        const newTree = Object.assign({}, senseTree);\r\n        newTree.timestamp = Date.now();\r\n        newTree.root = newRoot;\r\n        props.onSenseTreeUpdated(newTree);\r\n        console.log(newTree);\r\n      }\r\n    }\r\n  }\r\n\r\n  const onRenderHeader = (headerProps?: IGroupHeaderProps): JSX.Element => {\r\n    const onGroupHeaderUpdate = (groupInfo: IGroupInfo) => {\r\n      let groupId = headerProps?.group?.key;\r\n      if (groupId && senseTree) {\r\n        let newTree = Object.assign({}, senseTree)\r\n        let groupNode = findNode(newTree.root, (x) => x.node_id == groupId);\r\n        if (groupNode) {\r\n          groupNode.title = groupInfo.title;\r\n          groupNode.tag = groupInfo.tag;\r\n\r\n          props.onSenseTreeUpdated(newTree);\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    if (headerProps) {\r\n      let elemProps = {\r\n        ...headerProps,\r\n        onDragAndDrop: onGroupHeaderDrangAndDrop,\r\n        onGroupHeaderUpdate: onGroupHeaderUpdate,\r\n        onDeleteGroup: deleteGroup,\r\n        deleteState: deleteState,\r\n      }\r\n      return (<SenseTreeGroupHeader {...elemProps}\r\n      />)\r\n    } else {\r\n      return (<div></div>)\r\n    }\r\n\r\n  };\r\n\r\n  const onGroupClicked = (group: IGroup) => {\r\n    if (senseTree) {\r\n      const node = findNode(senseTree?.root, (x) => x.node_id == group.key);\r\n      node && props.onSelectedNodeUpdated(node);\r\n    }\r\n  }\r\n\r\n  const addGroup = () => {\r\n    if (senseTree) {\r\n      let newTree = Object.assign({}, senseTree);\r\n      newTree.root = addGroupNode(newTree.root);\r\n      newTree.timestamp = Date.now();\r\n      props.onSenseTreeUpdated(newTree);\r\n    }\r\n  }\r\n\r\n  const deleteGroup = (group: IGroup) => {\r\n    if (senseTree) {\r\n      const node = findNode(senseTree.root, (x) => x.node_id == group.key);\r\n      if (node) {\r\n        let newTree = Object.assign({}, senseTree);\r\n        let newRoot = removeGroupNode(newTree.root, node);\r\n        newTree.timestamp = Date.now();\r\n        props.onSenseTreeUpdated(newTree);\r\n      }\r\n    }\r\n  }\r\n\r\n  const toggleDeleteState = () => {\r\n    setDeleteState(!deleteState);\r\n  }\r\n\r\n  if (senseTree) {\r\n    return (\r\n      <div className=\"p-3\"\r\n        style={{ boxShadow: Depths.depth8 }}>\r\n        {/* treeData={props.senseTree.children as TreeItem[]} */}\r\n        <Stack>\r\n          <Stack.Item>\r\n            <Stack horizontal horizontalAlign=\"end\">\r\n              <IconButton\r\n                iconProps={{ iconName: \"Add\" }}\r\n                onClick={addGroup}\r\n                title=\"New Group\" />\r\n              <IconButton title=\"Delete\"\r\n                iconProps={{ iconName: \"Delete\" }}\r\n                onClick={toggleDeleteState}\r\n                checked={deleteState}\r\n              />\r\n            </Stack>\r\n          </Stack.Item>\r\n          <Stack.Item>\r\n            <div style={{ height: 468, overflowY: \"auto\" }}>\r\n              <GroupedList\r\n                items={[]}\r\n                groups={[senseTree.root].map(toGroup)}\r\n                onRenderCell={onRenderCell}\r\n                selectionMode={SelectionMode.none}\r\n                groupProps={\r\n                  {\r\n                    onRenderHeader: onRenderHeader,\r\n                    showEmptyGroups: true,\r\n                    headerProps: {\r\n                      onGroupHeaderClick: onGroupClicked\r\n                    }\r\n                  }\r\n                }\r\n                compact={true}\r\n              />\r\n            </div>\r\n          </Stack.Item>\r\n        </Stack>\r\n      </div>\r\n    )\r\n  } else {\r\n    return null;\r\n  }\r\n}","import React from 'react';\r\nimport { CwnSense } from \"../datatypes\";\r\nimport { CompactPeoplePicker, IBasePickerProps, IPersonaProps, PersonaInitialsColor } from \"@fluentui/react\";\r\n\r\nexport interface ISensePickerProps {\r\n  senseCandidates: CwnSense[];  \r\n  onSenseSuggestions: (filter: string) => CwnSense[];\r\n  onPickerChanged: (senseIds: string[]) => void;\r\n  onSubmit: () => void;\r\n}\r\n\r\nexport function SensePicker(props: ISensePickerProps) {\r\n  function onFilterChanged(filter: string) {\r\n    let senses = props.onSenseSuggestions(filter);\r\n    return senses.map((sense, index) => {\r\n      return {\r\n        imageInitials: sense.pos,\r\n        initialsColor: (index % 6) as PersonaInitialsColor,\r\n        text: sense.definition,\r\n        optionalText: sense.cwn_id\r\n      }\r\n    });\r\n  }\r\n\r\n  const onSelectedItemsChange = (items?: IPersonaProps[]) => {\r\n    if (items) {\r\n      props.onPickerChanged(items.map((x) => {\r\n        return x.optionalText?x.optionalText:\"\"\r\n      }));\r\n    }\r\n  }\r\n\r\n  let selectedItems = props.senseCandidates.map((sense) => {\r\n    return {\r\n      imageInitials: sense.pos,\r\n      initialsColor: PersonaInitialsColor[0],\r\n      text: sense.definition,\r\n      optionalText: sense.cwn_id,\r\n      styles: {primaryText: {fontSize: \"8pt\"}}\r\n    }\r\n  });\r\n\r\n  return (\r\n    <CompactPeoplePicker\r\n      selectedItems={selectedItems}\r\n      onResolveSuggestions={onFilterChanged}\r\n      onChange={onSelectedItemsChange}  \r\n      \r\n    />\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { SenseRevision, CwnSense, SenseTree } from '../datatypes';\r\nimport { Stack, IconButton, Announced, Rating } from '@fluentui/react';\r\nimport { SensePicker } from './SensePicker';\r\nimport { parseFilter, cloneSenseRevision } from './sorter_utils';\r\nimport { SessionDispatch, SessionActionType } from '../SenseAnnot/sessionUtils/sessionReducer';\r\n\r\nexport interface IRevisionViewProps {\r\n  revision: SenseRevision | null;\r\n  senses: CwnSense[],\r\n  senseTree: SenseTree | null,\r\n  sessionDispatch: SessionDispatch;\r\n  onSenseRevisionUpdated: (revision: SenseRevision) => void;\r\n}\r\n\r\nfunction getRating(revision: SenseRevision | null) {\r\n  if (revision) {\r\n    return revision.probs.length > 0 ?\r\n      Math.floor(revision.probs[0] / 0.25) : 4;\r\n  } else {\r\n    return 4;\r\n  }\r\n}\r\n\r\nexport function RevisionView(props: IRevisionViewProps) {\r\n  let revision = props.revision;\r\n  let iconStyle = { height: \"30px\", width: \"30px\", fontSize: \"100px\" };\r\n\r\n  const [rating, setRating] = useState(getRating(revision));\r\n  const [isAmbig, setIsAmbig] = useState(rating <= 3);\r\n\r\n  useEffect(() => {\r\n    const newRating = getRating(revision)\r\n    setRating(newRating);\r\n    setIsAmbig(newRating <= 3);\r\n  }, [props.revision]);\r\n\r\n  if (revision) {\r\n\r\n    const onFilterSenses = (filter: string) => {\r\n      return parseFilter(filter, props.senses, props.senseTree);\r\n    }\r\n\r\n    const onRevisionUpdated = (newRevision: SenseRevision) => {\r\n      props.onSenseRevisionUpdated(newRevision);\r\n    }\r\n\r\n    const onSenseCandidatesUpdated = (newCandidates: string[]) => {\r\n      if (revision) {\r\n        const newRevision = cloneSenseRevision(revision, newCandidates);\r\n        onRevisionUpdated(newRevision);\r\n      }\r\n    }\r\n\r\n    const onRatingChanged = (score: number) => {\r\n      if (revision) {\r\n        const candids = revision.candidates;\r\n        const remainProb = 1 - score / 4;\r\n        let newProbs = candids.slice(1).map(\r\n          () => remainProb / revision!.candidates.length);\r\n        newProbs.unshift(score / 4);\r\n        const newRevision = cloneSenseRevision(revision,\r\n          revision.candidates, newProbs);\r\n        console.log(newProbs);\r\n        onRevisionUpdated(newRevision);\r\n      }\r\n    }\r\n\r\n    const toggleIsAmbig = () => {\r\n      const newIsAmbig = !isAmbig;\r\n      onRatingChanged(newIsAmbig? 4: 3);\r\n      setIsAmbig(newIsAmbig);\r\n    };\r\n\r\n    const selectedSenses = revision.candidates.map((x) => {\r\n      let targets = props.senses.filter((sense) => sense.cwn_id == x);\r\n      return (targets && targets.length > 0) ? targets[0] : null;\r\n    }).filter((x) => x !== null) as CwnSense[];\r\n\r\n\r\n    const ratingElem = isAmbig ? (\r\n      <Stack.Item styles={{ root: { paddingLeft: \"20px\", minWidth: \"120px\" } }}><Rating\r\n        title=\"我覺得自己非常不確定（1）到非常確定（5）\"\r\n        min={1}\r\n        max={4}\r\n        rating={rating}\r\n        onChange={(ev, value) => value ? onRatingChanged(value) : null}\r\n        icon=\"CircleFill\"\r\n        unselectedIcon=\"CircleRing\"\r\n      /></Stack.Item>) : null;\r\n\r\n    return (\r\n      <Stack horizontal verticalAlign=\"center\" styles={{ root: { width: \"100%;\" } }}>\r\n        <Stack.Item grow={1}>\r\n          <SensePicker\r\n            senseCandidates={selectedSenses}\r\n            onPickerChanged={onSenseCandidatesUpdated}\r\n            onSenseSuggestions={onFilterSenses}\r\n            onSubmit={()=>{props.sessionDispatch(SessionActionType.NextTodo);}}\r\n          />\r\n        </Stack.Item>\r\n        {ratingElem}\r\n        <Stack.Item styles={{ root: { width: \"100px\" } }}>\r\n          <Stack tokens={{ childrenGap: 2 }} horizontal horizontalAlign=\"end\">\r\n            <IconButton style={iconStyle}\r\n              iconProps={{ iconName: 'CheckMark' }}\r\n              title=\"確認\" ariaLabel=\"CheckMark\"\r\n              disabled={revision.candidates.length == 0}\r\n              onClick={()=>{props.sessionDispatch(SessionActionType.NextTodo);}}\r\n            />\r\n            <IconButton style={iconStyle}\r\n              iconProps={{ iconName: 'Communications' }}\r\n              title=\"需要討論\" ariaLabel=\"Communications\"              \r\n              onClick={toggleIsAmbig} />\r\n          </Stack>\r\n        </Stack.Item>\r\n      </Stack>\r\n    )\r\n  } else {\r\n    return null;\r\n  }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { CwnSense, SenseTree, Annotations, SenseRevision, Trial, SenseTreeNode } from '../datatypes';\r\nimport { updateSenses, initSenseTree } from './sorter_updater';\r\nimport { SenseList } from './SenseList';\r\nimport { SenseTreeView } from './SenseTreeView';\r\nimport { RevisionView } from './RevisionView';\r\nimport { getGroupedSenses, GroupedSenses, checkSenseTree } from './tree_utils';\r\nimport { makeNewSenseRevision, getSenseRevision, cloneSenseRevision } from './sorter_utils';\r\nimport { uploadSenseTree } from './sorter_uploader';\r\nimport { SessionDispatch } from '../SenseAnnot/sessionUtils/sessionReducer';\r\n\r\n\r\nexport interface ISenseSorterData {\r\n  trial: Trial;\r\n  annotations: Annotations;\r\n  sessionDispatch: SessionDispatch;\r\n  onSenseRevisionUpdated: (trial: Trial, senseRevision: SenseRevision) => void;\r\n}\r\n\r\n\r\n\r\nfunction SenseSorter(props: ISenseSorterData) {\r\n  // let senseData = props.senseData;  \r\n  const __senseRevision = getSenseRevision(props.trial, props.annotations);  \r\n\r\n  const [senses, setSenses] = useState([] as CwnSense[]);\r\n  const [senseTree, setSenseTree] = useState<SenseTree | null>(null);\r\n  const [selectedNode, setSelectedNode] = useState<SenseTreeNode | null>(null);\r\n  const [selectedGroups, setSelectedGroups] = useState<GroupedSenses>({} as GroupedSenses);\r\n  const [senseRevision, setSenseRevision] = useState(__senseRevision);    \r\n\r\n  useEffect(() => {    \r\n    const sensePromise = updateSenses(props.trial, setSenses);\r\n    const senseTreePromise = sensePromise\r\n      .then((senses: CwnSense[]) => {\r\n        return initSenseTree(props.trial)\r\n      });\r\n    Promise.all([sensePromise, senseTreePromise])\r\n      .then(([senses, senseTree]) => {\r\n        onSenseTreeUpdated(senseTree, senses);\r\n      }).catch((err) => {\r\n        console.error(err)\r\n      });\r\n  }, [props.trial]);\r\n\r\n  // sync groupedSenses with `selectedNode` and `senseTree`\r\n  useEffect(() => {\r\n    let groupedSenses = null;\r\n    if (selectedNode) {\r\n      groupedSenses = getGroupedSenses(selectedNode, senses);\r\n    } else {\r\n      if (senseTree) {\r\n        groupedSenses = getGroupedSenses(senseTree.root, senses);\r\n      } else {\r\n        groupedSenses = { senses: [], groups: [] } as GroupedSenses;\r\n      }\r\n    }    \r\n    setSelectedGroups(groupedSenses);\r\n  }, [selectedNode, senseTree, senseRevision]);\r\n\r\n  useEffect(()=>{    \r\n    const __senseRevision = getSenseRevision(props.trial, props.annotations);\r\n    setSenseRevision(__senseRevision);    \r\n  }, [props.trial, props.annotations])\r\n\r\n  function onSenseTreeUpdated(newTree: SenseTree | null, senses: CwnSense[]) {\r\n    if (newTree) {\r\n      newTree = checkSenseTree(newTree, senses);\r\n      uploadSenseTree(props.trial, newTree);\r\n    }\r\n    setSenseTree(newTree);\r\n  }\r\n\r\n  const onSelectedGroupUpdated = (node: SenseTreeNode | null) => {\r\n    setSelectedNode(node);\r\n  }\r\n\r\n  const onSenseRevisionUpdated = (newRevision: SenseRevision) => {\r\n    props.onSenseRevisionUpdated(props.trial, newRevision);    \r\n  }\r\n\r\n  let borderStyle = { border: \"2px solid black\" };  \r\n\r\n  return (\r\n    <>\r\n      <div className=\"row\">\r\n        <RevisionView\r\n          key={\"rev-\" + senseRevision.itemId}\r\n          revision={senseRevision}\r\n          senses={senses}\r\n          senseTree={senseTree}\r\n          sessionDispatch={props.sessionDispatch}\r\n          onSenseRevisionUpdated={onSenseRevisionUpdated} />\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col-6\">\r\n          <SenseTreeView\r\n            senseTree={senseTree}\r\n            onSelectedNodeUpdated={onSelectedGroupUpdated}\r\n            onSenseTreeUpdated={(senseTree) => onSenseTreeUpdated(senseTree, senses)}\r\n          />\r\n        </div>\r\n        <div className=\"col-6\">\r\n          <SenseList            \r\n            senseTree={senseTree}\r\n            senseRevision={senseRevision}\r\n            groupedSenses={selectedGroups}\r\n            onSenseTreeUpdated={(senseTree) => onSenseTreeUpdated(senseTree, senses)}\r\n            onSenseRevisionUpdated={onSenseRevisionUpdated}\r\n            />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n\r\n}\r\n// key={`sense-list-${senseRevision.timestamp}`}\r\nexport default SenseSorter;\r\n","import { Trial, SenseTree } from \"../datatypes\";\r\nimport firebase from \"firebase\";\r\n\r\nexport function uploadSenseTree(trial: Trial, senseTree: SenseTree){\r\n  let db = firebase.firestore();\r\n  let userId = trial.userId;\r\n  let userEmail = trial.userEmail;\r\n  let treeId = `${userEmail}-${senseTree.lemma}`;\r\n  let result = db.collection(\"senseTrees\").doc(treeId).set(senseTree);\r\n  return result;\r\n}","import { SenseAnnotSession, User, Assignments, Trial, Annotations, SenseRevision, Annotation } from \"../datatypes\";\r\nimport { fetchSenses, fetchSession, fetchAnnotations } from '../DataHandler';\r\nimport { fetchAssignments, fetchSentence } from '../DataHandler';\r\nimport { SessionActionType, SessionActionPayload, SessionDispatch } from \"./sessionUtils/sessionReducer\";\r\n\r\ntype StateSetter<T> = React.Dispatch<React.SetStateAction<T>>\r\nexport async function updateSession(\r\n  user: User | null,\r\n  session_dispatcher: SessionDispatch) {\r\n\r\n  let new_session: SenseAnnotSession | null = null;\r\n\r\n  if (user !== null) {\r\n    try {\r\n      new_session = await fetchSession(user);\r\n    } catch (err) {\r\n      console.error(\"Error in updateSession\", err);\r\n    }\r\n    if (new_session === null) {\r\n      new_session = {\r\n        userId: user.uid,\r\n        userEmail: user.email,\r\n        lastActivity: Date.now(),\r\n        currentAssignmentId: \"\",\r\n        currentItemId: \"\",\r\n        currentItemNo: NaN\r\n      };\r\n    }\r\n  } else {\r\n    new_session = null;\r\n  }\r\n\r\n  session_dispatcher(\r\n    SessionActionType.Update,\r\n    { newSession: new_session });\r\n}\r\n\r\nexport async function updateAssignments(\r\n  user: User | null,\r\n  assignments_setter: StateSetter<Assignments>) {\r\n\r\n  let assignments: Assignments = [];\r\n  if (user !== null) {\r\n    try {\r\n      assignments = await fetchAssignments(user);\r\n    } catch (err) {\r\n      console.error(err);\r\n      assignments = [];\r\n    }\r\n  } else {\r\n    assignments = [];\r\n  }\r\n\r\n  assignments_setter(assignments);\r\n}\r\n\r\n\r\nexport async function updateAnnotations(\r\n  user: User | null,\r\n  annotations_setter: StateSetter<Annotations>) {\r\n\r\n  let annotations = {} as Annotations;\r\n  if (user !== null) {\r\n    try {\r\n      annotations = await fetchAnnotations(user);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  } else {\r\n    // pass\r\n  }\r\n\r\n  annotations_setter(annotations);\r\n}\r\n\r\nexport async function updateTrial(\r\n  session: SenseAnnotSession | null,\r\n  trial_setter: StateSetter<Trial>) {\r\n\r\n  let trial: Trial = {} as Trial;\r\n\r\n  if (session && session.currentItemId.length > 0) {\r\n    let itemId = session.currentItemId;\r\n    let assignId = session.currentAssignmentId;\r\n\r\n    let sentenceId = itemId.split(\":\")[0];\r\n    let tokenId = parseInt(itemId.split(\":\")[1]);\r\n    let sentence = await fetchSentence(sentenceId);\r\n\r\n    const preContextId = getPreContext(sentenceId);\r\n    const postContextId = getPostContext(sentenceId);    \r\n    let preContext = preContextId? await fetchSentence(preContextId): [];\r\n    let postContext = postContextId? await fetchSentence(postContextId): [];\r\n\r\n    try {\r\n      trial = {\r\n        sentenceId: sentenceId,\r\n        sentence: sentence,\r\n        preContext: preContext,\r\n        postContext: postContext,\r\n        token: sentence[tokenId],\r\n        userEmail: session.userEmail,\r\n        userId: session.userId,\r\n        assignId: assignId,\r\n        itemId: itemId\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  } else {\r\n    // pass\r\n  }\r\n\r\n  trial_setter(trial);\r\n}\r\n\r\nexport function makeNewAnnotation(\r\n  assignId: string, session: SenseAnnotSession) {\r\n\r\n  let userEmail = session.userEmail;\r\n  let annot = {\r\n    annotId: `${userEmail}:${assignId}`,\r\n    annotatorId: session.userId,\r\n    assignId: assignId,\r\n    results: {} as { [key: string]: SenseRevision }\r\n  } as Annotation;\r\n  return annot;\r\n}\r\n\r\nfunction getPreContext(sentenceId: string) {\r\n  return getContext(sentenceId, \"pre\");\r\n}\r\n\r\nfunction getPostContext(sentenceId: string) {\r\n  return getContext(sentenceId, \"post\");\r\n}\r\n\r\nfunction getContext(sentenceId: string, direction: \"pre\" | \"post\") {\r\n  const [batchId, sentenceNoStr] = sentenceId.split(\"-\");\r\n  if (!batchId || !sentenceNoStr) return null;\r\n\r\n  const sentenceNo = parseInt(sentenceNoStr);\r\n  if (isNaN(sentenceNo)) return null;\r\n\r\n  if (direction == \"post\") {\r\n    return `${batchId}-${sentenceNo + 1}`\r\n  } else {\r\n    return `${batchId}-${sentenceNo - 1}`\r\n  }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport Controller from '../Controller/Controller';\r\nimport SentenceViewer from '../SentenceViewer/SentenceViewer';\r\nimport SenseSorter from '../SenseSorter/SenseSorter';\r\nimport { Assignments, Trial, Annotations, SenseRevision, Annotation } from \"../datatypes\";\r\nimport { User, SenseAnnotSession } from \"../datatypes\";\r\nimport { updateSession, updateAssignments, updateTrial, updateAnnotations, makeNewAnnotation } from \"./annot_updater\";\r\nimport { login, logout, subscribeLoginStatus } from '../DataHandler';\r\nimport * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/analytics\";\r\nimport { uploadAnnotation } from './annot_uploader';\r\nimport { useSession } from './sessionUtils';\r\nimport { SessionActionType, SessionActionPayload } from './sessionUtils/sessionReducer';\r\n\r\nfunction initializeFirebase() {\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyCtaBIZ-IiQ0a5Z0LsuEnVGmojJbY9yvMs\",\r\n    authDomain: \"langon-281613.firebaseapp.com\",\r\n    databaseURL: \"https://langon-281613.firebaseio.com\",\r\n    projectId: \"langon-281613\",\r\n    storageBucket: \"langon-281613.appspot.com\",\r\n    messagingSenderId: \"98385288306\",\r\n    appId: \"1:98385288306:web:09cdd581f06c0e3cdb76eb\",\r\n    measurementId: \"G-36C7NTBFN0\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  firebase.analytics();\r\n}\r\n\r\nfunction SenseAnnot() {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [annotations, setAnnotations] = useState({} as Annotations);\r\n  const [assignments, setAssignments] = useState<Assignments>([]);\r\n  const [session, sessionDispatch] = useSession(assignments, annotations);\r\n  const [trial, setTrial] = useState<Trial>({} as Trial);\r\n\r\n  console.log(\"rendering SenseAnnot\");\r\n  \r\n  // initialization\r\n  useEffect(() => {\r\n    initializeFirebase();\r\n    subscribeLoginStatus(\r\n      (user) => setUser(user),\r\n      () => setUser(null));\r\n  }, []);\r\n\r\n  // update session, depends on user\r\n  useEffect(() => { updateSession(user, sessionDispatch) }, [user]);\r\n  // update Assignments, depends on user\r\n  useEffect(() => { updateAssignments(user, setAssignments) }, [user])\r\n  // update annotations, depends on user\r\n  useEffect(() => { updateAnnotations(user, setAnnotations) }, [user]);\r\n  // update trial, depends on session\r\n  useEffect(() => { updateTrial(session, setTrial) }, [session, assignments]);\r\n\r\n  // set session to default value\r\n  useEffect(() => {\r\n    if (session && session.currentAssignmentId.length == 0) {      \r\n      sessionDispatch(SessionActionType.Init);\r\n    }\r\n  }, [assignments]);\r\n\r\n  let currentItemId = session ? session.currentItemId : \"\";\r\n\r\n  let controllerStyle = {\r\n    background: \"radial-gradient(circle at bottom left, rgba(0,0,0,1) 0%, rgba(75,75,75,1) 100%)\",\r\n    borderRight: \"2px dashed darkblue\",\r\n    color: \"white\",\r\n  }\r\n\r\n  /*\r\n   *   Event callback\r\n   */\r\n  const updateSenseRevision = (\r\n    session: SenseAnnotSession | null,\r\n    trial: Trial,\r\n    revision: SenseRevision | null = null) => {\r\n\r\n    if (session && revision) {\r\n      const assignId = trial.assignId;\r\n      const itemId = trial.itemId;\r\n      let newAnnotations = Object.assign({}, annotations);\r\n      let annot = newAnnotations[assignId];\r\n\r\n      if (annot) {\r\n        annot.results[itemId] = revision;\r\n      } else {\r\n        annot = makeNewAnnotation(assignId, session);\r\n        annot.results[itemId] = revision;\r\n        newAnnotations[assignId] = annot;\r\n      }\r\n      \r\n      setAnnotations(newAnnotations);      \r\n      onAnnotationUpdated(annot);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   *    Database update callback\r\n   */\r\n  const onAnnotationUpdated = (newAnnotation: Annotation) => {\r\n    uploadAnnotation(newAnnotation);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col-md-3 col-sm-6 d-none d-sm-block\" style={controllerStyle}>\r\n          <Controller\r\n            user={user}\r\n            session={session}\r\n            assignments={assignments}\r\n            annotations={annotations}\r\n            sessionDispatch={sessionDispatch}\r\n            login_fn={login}\r\n            logout_fn={logout}></Controller>\r\n        </div>\r\n        <div className=\"col-md-9 col-sm-6 col-xs-12\">\r\n          <SentenceViewer\r\n            itemId={currentItemId}\r\n            sentence={trial.sentence}\r\n            preContext={trial.preContext}\r\n            postContext={trial.postContext}></SentenceViewer>\r\n          <SenseSorter trial={trial}\r\n            annotations={annotations}\r\n            sessionDispatch={sessionDispatch}\r\n            onSenseRevisionUpdated={(trial, revision) =>\r\n              updateSenseRevision(session, trial, revision)}></SenseSorter>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SenseAnnot;\r\n","import React from 'react';\n// import logo from './logo.svg';\nimport SenseAnnot from './SenseAnnot/SenseAnnot'\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { initializeIcons } from '@uifabric/icons';\nimport './App.css';\n\ninitializeIcons();\n\nfunction App() {\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <SenseAnnot />\n    </DndProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}