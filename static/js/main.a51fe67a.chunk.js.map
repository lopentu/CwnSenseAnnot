{"version":3,"sources":["Controller/LoginStatus.tsx","Controller/Session.tsx","Controller/task_utils.tsx","Controller/AssignmentList.tsx","Controller/NavigationBar.tsx","Controller/controller_utils.ts","Controller/Tasks.tsx","DataHandler/login.ts","DataHandler/getData.ts","SenseAnnot/annot_updater.ts","Controller/Controller.tsx","SentenceViewer/Token.tsx","SentenceViewer/SentenceViewer.tsx","SenseSorter/tree_utils.ts","SenseSorter/sorter_utils.ts","SenseSorter/sorter_updater.ts","SenseSorter/SenseItem.tsx","SenseSorter/SenseList.tsx","SenseSorter/GroupInfoEdit.tsx","SenseSorter/SenseTreeGroupHeader.tsx","SenseSorter/SenseTreeView.tsx","SenseSorter/SensePicker.tsx","SenseSorter/RevisionView.tsx","SenseSorter/SenseSorter.tsx","SenseSorter/sorter_uploader.ts","SenseAnnot/SenseAnnot.tsx","SenseAnnot/annot_uploader.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoginStatus","props","linkStyle","root","color","fontSize","textDecoration","user","Stack","horizontal","name","style","paddingLeft","Link","styles","onClick","logout_fn","login_fn","Session","session","sess","last_time","Date","lastActivity","toLocaleString","id","populate_task_items","currentAssignId","assignments","annotations","map","x","assign_id","assignId","nTotal","items","length","nDone","nAmbig","Object","values","results","reduce","obj","probs","summarise_progress","checked","AssignmentList","List","onRenderCell","item","index","actStyle","padding","height","icon","iconHovered","rootHovered","border","borderRadius","check_button","ActionButton","iconProps","iconName","onAssignIdChanged","Item","align","grow","NavigationBar","buttonStyle","horizontalAlign","IconButton","onPrevTrial","title","onNextTrial","Label","minWidth","TextField","width","defaultValue","currentItemNo","toString","findCurrentAssignment","curAssigId","currentAssignmentId","curAssigs","filter","findCurrentItemNo","assignment","curItemId","currentItemId","indexOf","Tasks","assig","itemNo","assign_items","progress","compute_progress","onItemNoUpdated","itemId","onItemIdChanged","tokens","childrenGap","ProgressIndicator","itemName","label","Math","round","percentComplete","Separator","transformUser","user_raw","empty","displayName","email","photoUrl","photoURL","uid","login","a","console","log","provider","firebase","GoogleAuthProvider","setPersistence","Auth","Persistence","LOCAL","then","signInWithPopup","result","credential","accessToken","debug","logout","signOut","fetchSenses","lemma","db","firestore","collection","doc","get","exists","data","senses","Error","fetchSession","fetchAssignments","query","forEach","push","fetchAnnotations","where","annot","fetchSentence","sentenceId","split","fetchSenseTree","userEmail","treeId","senseTree","session_setter","new_session","error","userId","now","assignments_setter","annotations_setter","trial_setter","trial","tokenId","parseInt","sentence","token","err","makeNewSession","newSession","assign","makeNewAnnotation","annotId","annotatorId","Controller","onSessionUpdated","assigns","Token","isFocus","pos","endsWith","className","SentenceViewer","undefined","countLeaves","node","children","node_type","sum","toGroup","depth","group_members","group","key","node_id","tag","description","allCount","level","findNode","rootNode","predicate","nodeList","findNodes","findNodeTrace","path","buf","pop","cur_node","cur_path","findParent","target","paths","moveNode","srcNode","tgtNode","newRoot","tgtParent","srcParent","srcIndex","splice","tgtIndex","newNodeList","slice","getLeaves","parent","flat","getGroupedSenses","ref_senses","sense_nodes","idx","cwn_id","sense_x","sense","parents","group_map","item_x","i","parent_x","parent_id","out_items","out_groups","keys","groupNode","groupTitle","count","startIndex","groups","makeSenseTreeGroupNode","makeSenseTreeSenseNode","definition","makeNewSenseTree","annotator","timestamp","senseSetter","SenseItem","ref","useRef","useDrag","type","senseId","collect","monitor","isDragging","examples","drag","useDrop","accept","drop","onDragAndDrop","canDrop","TooltipHost","tooltipProps","onRenderContent","delay","TooltipDelay","long","directionalHint","DirectionalHint","rightCenter","Persona","imageInitials","initialsColor","text","secondaryText","size","PersonaSize","size32","showSecondaryText","marginTop","userSelect","primaryText","selectionModel","Selection","onSelectionChanged","getSelection","SenseList","onSenseDragAndDrop","srcSenseId","tgtSenseId","newTree","onSenseTreeUpdated","groupedSenses","overflowX","overflowY","GroupedList","nestingDepth","onSenseSelected","compact","selectionMode","SelectionMode","none","groupProps","showEmptyGroups","GroupInfoEdit","useState","groupInfo","setGroupInfo","mergeStyleSets","margin","textInput","FocusTrapCallout","role","gapSpace","elemId","onDismiss","setInitialFocus","onChange","ev","newvalue","paddingTop","Button","PrimaryButton","onGroupInfoUpdate","SenseTreeGroupHeader","toggleCollapse","onToggleCollapse","editVisibility","setEditVisibility","toggleEditVisibility","groupNodeId","nodeId","isOver","groupButton","isCollapsed","countStr","deleteButton","deleteState","onDeleteGroup","editCallout","onGroupHeaderUpdate","marginLeft","groupLevel","verticalAlign","onGroupHeaderClick","onDoubleClick","SenseTreeView","setDeleteState","onGroupHeaderDrangAndDrop","srcNodeId","tgtNodeId","deleteGroup","removeGroupNode","boxShadow","Depths","depth8","newNode","unshift","addGroupNode","itemIndex","onRenderHeader","headerProps","elemProps","groupId","onSelectedNodeUpdated","SensePicker","selectedItems","senseCandidates","PersonaInitialsColor","optionalText","onResolveSuggestions","onSenseSuggestions","onPickerChanged","RevisionView","revision","iconStyle","isAmbig","setIsAmbig","rating","setRating","selectedSenses","candidates","targets","ratingElem","Rating","min","max","value","unselectedIcon","newCandidates","newRevision","onSenseRevisionUpdated","onRevisionUpdated","filterStr","serial","senseInGroups","flatMap","leafs","leaf","findSense","startsWith","parseFilter","ariaLabel","getSenseRevision","makeNewSenseRevision","SenseSorter","setSenses","setSenseTree","selectedNode","setSelectedNode","selectedGroups","setSelectedGroups","senseNodeIds","orphanSenses","orphanGroup","checkSenseTree","set","uploadSenseTree","useEffect","updateSenses","initSenseTree","catch","senseRevision","SenseAnnot","setUser","setSession","setAnnotations","setAssignments","setTrial","signed_in","not_signed_in","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","onAuthStateChanged","raw_user","updateSession","updateAssignments","updateAnnotations","updateTrial","uploadSession","onAnnotationUpdated","newAnnotation","annotation","background","borderRight","newAnnotations","updateSenseRevision","initializeIcons","App","DndProvider","backend","HTML5Backend","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a51fe67a.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from \"../datatypes\"\nimport { Link, Stack } from \"@fluentui/react\"\n\nexport interface ILoginStatus {\n  user: User|null;\n  login_fn: () => void;\n  logout_fn: () => void;\n}\n\nexport function LoginStatus(props: ILoginStatus) {\n  let linkStyle = {root: {color: \"white\", fontSize: \"small\", textDecoration: \"underline\"}}\n  if (props.user) {\n    return (\n      <Stack horizontal>\n        <div>{props.user.name}</div>\n        <div style={{paddingLeft: \"10pt\"}}>\n          <Link styles={linkStyle} onClick={props.logout_fn}>Logout</Link>\n        </div>\n      </Stack>\n    )\n  } else {\n    return (\n      <Stack horizontal>\n        <div>Not logged in</div>\n        <div>\n          <Link styles={linkStyle} onClick={props.login_fn}>Login</Link>\n        </div>\n      </Stack>\n    )\n  }\n}\n","import React from \"react\";\nimport { Stack } from \"@fluentui/react\";\nimport { SenseAnnotSession } from \"../datatypes\";\n\nexport interface ISessionProps {\n  session: SenseAnnotSession | null,\n  onNextTrial?: () => void;\n  onPrevTrial?: () => void;\n  onNextTodo?: () => void;\n  onPrevTodo?: () => void;\n}\n\nfunction toftime(timestamp: number){\n  let d = new Date(timestamp);\n  d.toLocaleString('en-GB')\n}\n\nexport function Session(props: ISessionProps) {\n  if (props.session !== null) {\n    let sess = props.session;\n    let last_time = new Date(sess.lastActivity).toLocaleString(\"en-GB\")\n    return (\n      <Stack id=\"session-wrapper\">\n        <div style={{fontSize: \"small\"}}>Last activity:</div>\n        <div style={{fontSize: \"small\"}}>{last_time}</div>        \n      </Stack>\n    )\n  } else {\n    return <Stack id=\"session-wrapper\"></Stack>;\n  }\n\n}","import { Annotations, Assignments } from \"../datatypes\";\n\nexport interface ITaskItem {\n  name: string;\n  checked: boolean;\n  nTotal: number;\n  nDone: number; nAmbig: number\n}\n\n\nexport function compute_progress(items: ITaskItem[]) {\n  let { nDone, nTotal } = items.reduce((obj, x) => {\n    obj.nDone += x.nDone;\n    obj.nTotal += x.nTotal;\n    return obj;\n  }, { nDone: 0, nTotal: 0 });\n  return nDone / nTotal;\n}\n\nfunction summarise_progress(\n  annotations: Annotations, assign_id: string) {\n\n  return Object.values(annotations[assign_id].results)\n    .reduce((obj, x) => {\n      if (x.probs.length > 0) {\n        obj.nDone += x.probs[0] >= 0.8 ? 1 : 0;\n        obj.nAmbig += x.probs[0] < 0.8 ? 1 : 0;\n      }\n      return obj;\n    }, { nDone: 0, nAmbig: 0 })\n}\n\nexport function populate_task_items(\n  currentAssignId: string,\n  assignments: Assignments,\n  annotations: Annotations\n) {\n\n  return assignments.map((x) => {\n    let assign_id = x.assignId;    \n    let nTotal = x.items.length;\n    let nDone = 0;\n    let nAmbig = 0;\n    if (assign_id in annotations) {\n      ({ nDone, nAmbig } = summarise_progress(\n        annotations, assign_id))\n    }\n\n    return {\n      name: x.assignId,\n      nTotal, nDone, nAmbig,\n      checked: x.assignId === currentAssignId\n    } as ITaskItem;\n  });\n}\n\n\n","import React from 'react';\nimport { Annotations, Assignments } from '../datatypes';\nimport { List, ActionButton, Stack, concatStyleSetsWithProps } from '@fluentui/react';\nimport { ITaskItem } from './task_utils';\n\nexport interface IAssignmentListProps {\n  items: ITaskItem[]\n  onAssignIdChanged: (assignId: string) => void;\n}\n\nexport function AssignmentList(props: IAssignmentListProps) {\n  function render_task_item(item: ITaskItem | undefined, index: number | undefined) {\n\n    let actStyle = {\n      root: { padding: \"1px\", height: \"24pt\" },\n      icon: { color: \"white\" },\n      iconHovered: { color: \"white\" },\n      rootHovered: {\n        border: \"1px solid white\",\n        borderRadius: \"5px\"\n      }\n    };\n\n    if (item) {\n\n      let check_button = item.checked ?\n        (<ActionButton styles={actStyle} iconProps={{ iconName: \"MSNVideosSolid\" }} checked={false} />) :\n        (<ActionButton styles={actStyle}\n          onClick={()=>props.onAssignIdChanged(item.name)}\n          iconProps={{ iconName: \"MSNVideos\" }}\n          checked={false} />);\n\n      return (\n        <Stack horizontal>\n          <Stack.Item align=\"center\">{check_button}</Stack.Item>\n          <Stack.Item grow={1} align=\"center\">{item.name}</Stack.Item>\n          <Stack.Item align=\"center\">{item.nDone}/{item.nAmbig}/{item.nTotal}</Stack.Item>\n        </Stack>\n      )\n    } else {\n      return null;\n    }\n  }\n  return (\n    <List items={props.items} onRenderCell={render_task_item}></List>\n  );\n}\n\n\n","import React from 'react';\nimport { Stack, IconButton, TextField, Label } from '@fluentui/react';\n\nexport interface INavigationBar {\n  currentItemNo: number;\n  onPrevTrial: () => void;\n  onNextTrial: () => void;\n}\n\nexport function NavigationBar(props: INavigationBar) {\n  let buttonStyle = {\n    root:\n      { color: \"white\", border: \"1px solid white\", borderRadius: \"5px\" }\n  }\n  debugger;\n  return (\n    <>\n      <Stack horizontal horizontalAlign=\"space-evenly\">\n        <IconButton styles={buttonStyle}\n          onClick={props.onPrevTrial} \n          iconProps={{ iconName: \"CaretSolidLeft\" }} \n          title=\"Previous Item\" />\n        <IconButton styles={buttonStyle} iconProps={{ iconName: \"CaretLeft8\" }} title=\"Previous Todo\" />\n        <IconButton styles={buttonStyle} iconProps={{ iconName: \"CaretRight8\" }} title=\"Next Todo\" />\n        <IconButton styles={buttonStyle} \n          onClick={props.onNextTrial}\n          iconProps={{ iconName: \"CaretSolidRight\" }} \n          title=\"Next Item\" />\n      </Stack>\n      <Stack horizontal>\n        <Stack.Item>\n          <Label styles={{ root: { color: \"white\", minWidth: \"70px\" } }}>Go to Item</Label>\n        </Stack.Item>\n        <Stack.Item grow={1}>\n          <TextField styles={{ root: { width: \"100%\" } }}\n            defaultValue={(props.currentItemNo+1).toString()} />\n        </Stack.Item>\n      </Stack>\n    </>\n  );\n}","import { SenseAnnotSession, Assignment, Assignments } from \"../datatypes\";\n\nexport function findCurrentAssignment(\n  session: SenseAnnotSession|null,\n  assignments: Assignments): Assignment | null {\n  \n  if (session) {\n    const curAssigId = session.currentAssignmentId;\n    const curAssigs = assignments.filter((x) => x.assignId == curAssigId);\n    if (curAssigs.length > 0) {\n      return curAssigs[0];\n    } else {\n      return null;\n    }\n  }\n  return null;\n}\n\nexport function findCurrentItemNo(\n  session: SenseAnnotSession|null,\n  assignment: Assignment | null):number {\n\n  const curItemId = session?.currentItemId;\n  if (assignment && curItemId) {\n    const curItemSerial = assignment.items.indexOf(curItemId);\n    return curItemSerial;\n  }\n\n  return -1;\n}","import React, { useState, useEffect } from 'react';\nimport { Assignments, Annotations, SenseAnnotSession } from '../datatypes';\nimport { List, Stack, IconButton, ProgressIndicator, Button, ActionButton, Label, TextField, Separator } from '@fluentui/react';\nimport { white } from 'color-name';\nimport { populate_task_items, compute_progress } from './task_utils';\nimport { AssignmentList } from './AssignmentList';\nimport { NavigationBar } from './NavigationBar';\nimport { findCurrentAssignment, findCurrentItemNo } from './controller_utils';\nimport { makeNewSession } from '../SenseAnnot/annot_updater';\n\n\nexport interface ITasksProps {\n  session: SenseAnnotSession | null;\n  assignments: Assignments;\n  annotations: Annotations;\n  onAssignIdChanged: (assignId: string) => void;\n  onItemIdChanged: (itemId: string) => void;\n}\n\nexport function Tasks(props: ITasksProps) {\n  let assignments = props.assignments;\n  let annotations = props.annotations;\n  let session = props.session;\n\n  const assig = findCurrentAssignment(props.session, props.assignments);\n  let itemNo = findCurrentItemNo(props.session, assig);\n\n  if (session === null) {\n    return null;\n  }\n\n  let assign_items = populate_task_items(\n    session.currentAssignmentId, props.assignments, props.annotations);\n  let progress = compute_progress(assign_items);\n\n  const onNextTrial = () => {\n    const assig = findCurrentAssignment(props.session, props.assignments);\n    let itemNo = findCurrentItemNo(props.session, assig);\n    onItemNoUpdated(itemNo + 1);\n  }\n\n  const onPrevTrial = () => {\n    const assig = findCurrentAssignment(props.session, props.assignments);\n    let itemNo = findCurrentItemNo(props.session, assig);\n    onItemNoUpdated(itemNo - 1);\n  }\n\n  // on item number changed\n  const onItemNoUpdated = (itemNo: number) => {\n    const assig = findCurrentAssignment(props.session, props.assignments);\n    if (assig && itemNo >= 0 && itemNo < assig.items.length) {\n      const itemId = assig.items[itemNo];\n      props.onItemIdChanged(itemId);\n    }\n  }\n\n  return (\n    <Stack tokens={{ childrenGap: 10 }}>\n      <ProgressIndicator\n        styles={{ itemName: { color: \"white\" } }}\n        label={`${Math.round(progress * 10000) / 100}% Complete`}\n        percentComplete={progress} />\n      <NavigationBar\n        currentItemNo={itemNo}\n        onPrevTrial={onPrevTrial}\n        onNextTrial={onNextTrial} />\n      <Separator></Separator>\n      <AssignmentList\n        onAssignIdChanged={props.onAssignIdChanged}\n        items={assign_items} />\n    </Stack>\n  )\n}\n\n\n","import * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport {User} from \"../datatypes\"\n\nfunction transformUser(user_raw: firebase.User): User{\n  let empty = (x: string|null) => {return x? x: \"\"};\n  let user = {\n    name: empty(user_raw.displayName),\n    email: empty(user_raw.email),\n    photoUrl: empty(user_raw.photoURL),\n    uid: empty(user_raw.uid)\n  }\n  return user;\n}\nexport async function login() {\n  console.log(\"login function called\");\n  let provider = new firebase.auth.GoogleAuthProvider();\n  try {\n    const result = await firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\n                    .then(()=>{\n                      return firebase.auth().signInWithPopup(provider);\n                    });\n    \n    if (result.credential) {\n      let token = (result.credential as firebase.auth.OAuthCredential).accessToken;\n      let user: User|null = null;      \n      let user_raw = result.user;\n      if (user_raw){        \n        user = transformUser(user_raw);\n      }\n      return user;      \n    }\n  }\n  catch (error) {\n    console.debug(error);\n  }\n}\n\nexport function logout() {\n  firebase.auth().signOut();\n}\n\nexport function subscribeLoginStatus(\n    signed_in: ((user: User)=>void), \n    not_signed_in: (()=>void)) {\n  firebase.auth().onAuthStateChanged((raw_user)=>{\n    if(raw_user){\n      let user = transformUser(raw_user);\n      signed_in(user);\n    } else {\n      not_signed_in();\n    }\n  })\n}","import { SenseAnnotSession, User, Assignments, Annotations, PretaggedSentence, PretaggedToken, SenseTree, SenseRevision, Annotation, Assignment } from \"../datatypes\";\nimport { CwnSense } from \"../datatypes\";\nimport { object } from \"prop-types\";\nimport firebase from \"firebase\";\nimport { makeNewSenseTree } from \"../SenseSorter/sorter_utils\";\n\n\n\nexport async function fetchSenses(lemma: string): Promise<CwnSense[]> {\n  let db = firebase.firestore();\n  let doc = await db.collection(\"senses\").doc(lemma).get();\n\n  if (doc.exists) {\n    let data = doc.data() as {lemma: string, senses: CwnSense[]};\n    return data.senses;\n  } else {\n    throw new Error(\"Cannot find lemma \" + lemma);\n  }\n}\n\n\nexport async function fetchSession(user: User)\n  : Promise<SenseAnnotSession | null> {\n  let db = firebase.firestore();\n  let doc = await db.collection(\"sessions\").doc(user.uid).get();\n  if (doc.exists) {\n    return doc.data() as SenseAnnotSession;\n  } else {\n    return null;\n  }\n}\n\n\nexport async function fetchAssignments(user: User)\n  : Promise<Assignments> {\n  let db = firebase.firestore();\n  let query = await db.collection(\"assignments\").get();\n  let assignments: Assignments = []\n  query.forEach((doc) => {\n    assignments.push(doc.data() as Assignment);\n  });\n  return assignments;\n}\n\nexport async function fetchAnnotations(user: User)\n  : Promise<Annotations> {\n  let db = firebase.firestore();\n  let query = await db.collection(\"assignments\")\n    .where(\"annotatorId\", \"==\", user.uid).get();\n  let annotations: Annotations = {};\n  query.forEach((doc) => {\n    let annot = doc.data() as Annotation;\n    annotations[annot.assignId] = annot;\n  });\n  return annotations;\n}\n\n\nexport async function fetchSentence(sentenceId: string)\n  : Promise<PretaggedToken[]> {\n  let db = firebase.firestore();\n\n  let doc = await db.collection(\"sentences\").doc(sentenceId).get();\n  if (doc.exists) {\n    let data = doc.data()! as { sid: string, tokens: string[] };\n    let tokens = (data.tokens as string[])\n      .map((x) => x.split(\"::\")) as PretaggedToken[];\n    return tokens;\n  } else {\n    return [];\n  }\n}\n\nexport async function fetchSenseTree(userEmail: string, lemma: string)\n  : Promise<SenseTree | null> {\n\n  let db = firebase.firestore();\n  let treeId = `${userEmail}-${lemma}`;\n  let senseTree = null;\n\n  let doc = await db.collection(\"senseTrees\").doc(treeId).get();\n  if (doc.exists) {\n    senseTree = doc.data() as SenseTree;\n  }\n\n  return senseTree;\n}\n","import { SenseAnnotSession, User, Assignments, Trial, Annotations, SenseRevision, Annotation } from \"../datatypes\";\nimport { fetchSenses, fetchSession, fetchAnnotations } from '../DataHandler';\nimport { fetchAssignments, fetchSentence } from '../DataHandler';\n\ntype StateSetter<T> = React.Dispatch<React.SetStateAction<T>>\nexport async function updateSession(\n  user: User | null,\n  session_setter: StateSetter<SenseAnnotSession | null>) {\n\n  let new_session: SenseAnnotSession | null = null;\n  \n  if (user !== null) {\n    try {\n      new_session = await fetchSession(user);\n      console.debug(new_session);\n    } catch (err) {\n      console.error(err);      \n    }\n\n    if (new_session === null){\n      new_session = {\n        userId: user.uid,\n        userEmail: user.email,\n        lastActivity: Date.now(),\n        currentAssignmentId: \"\",    \n        currentItemId: \"\"\n      };\n    }\n  } else {\n    new_session = null;\n  }\n\n  session_setter(new_session);\n}\n\nexport async function updateAssignments(\n  user: User | null,\n  assignments_setter: StateSetter<Assignments>) {\n\n  let assignments: Assignments = [];\n  if (user !== null) {\n    try {\n      assignments = await fetchAssignments(user);      \n    } catch (err) {\n      console.error(err);      \n      assignments = [];\n    }\n  } else {\n    assignments = [];\n  }\n\n  assignments_setter(assignments);\n}\n\n\nexport async function updateAnnotations(\n  user: User | null,\n  annotations_setter: StateSetter<Annotations>) {\n\n  let annotations = {} as Annotations;\n  if (user !== null) {\n    try {\n      annotations = await fetchAnnotations(user);\n    } catch (err) {\n      console.error(err);\n    }\n  } else {\n    // pass\n  }\n\n  annotations_setter(annotations);\n}\n\nexport async function updateTrial(\n  session: SenseAnnotSession | null,\n  trial_setter: StateSetter<Trial>) {\n\n  let trial: Trial = {} as Trial;\n\n  if (session && session.currentItemId.length > 0) {\n    let itemId = session.currentItemId;\n    let assignId = session.currentAssignmentId;\n\n    let sentenceId = itemId.split(\":\")[0];\n    let tokenId = parseInt(itemId.split(\":\")[1]);\n    let sentence = await fetchSentence(sentenceId);\n    try {\n      trial = {\n        sentenceId: sentenceId,\n        sentence: sentence,\n        token: sentence[tokenId],\n        userEmail: session.userEmail,\n        userId: session.userId, \n        assignId: assignId,\n        itemId: itemId\n      }\n    } catch (err) {\n      console.error(err);\n    }\n  } else {\n    // pass\n  }\n\n  trial_setter(trial);\n}\n\nexport function makeNewSession(\n  session: SenseAnnotSession,\n  assignId: string = \"\", itemId: string = \"\") {\n  \n  let newSession = Object.assign({}, session);\n  if (assignId.length > 0){\n    newSession.currentAssignmentId = assignId;  \n  }\n\n  if(itemId.length > 0){\n    newSession.currentItemId = itemId;\n  }\n  \n  newSession.lastActivity = Date.now();\n  \n  return newSession;\n}\n\nexport function makeNewAnnotation(\n  assignId: string, session: SenseAnnotSession){\n  \n  let userEmail = session.userEmail;\n  let annot = {\n    annotId: `${userEmail}:${assignId}`,\n    annotatorId: session.userId,\n    assignId: assignId,\n    results: {} as {[key: string]: SenseRevision}\n  } as Annotation;\n  return annot;\n}\n","import React from 'react';\nimport { User, SenseAnnotSession, Assignments, Annotations, Assignment } from \"../datatypes\"\nimport { Stack } from '@fluentui/react';\nimport { LoginStatus } from './LoginStatus';\nimport { Session } from './Session';\nimport { Tasks } from './Tasks';\nimport { makeNewSession } from '../SenseAnnot/annot_updater';\nimport { findCurrentAssignment, findCurrentItemNo } from './controller_utils';\n\nexport interface IControllerData {\n  user: User | null;\n  session: SenseAnnotSession | null;\n  assignments: Assignments;\n  annotations: Annotations;\n  onSessionUpdated: (session: SenseAnnotSession) => void;\n  login_fn: () => void;\n  logout_fn: () => void;\n}\n\nfunction Controller(props: IControllerData) {\n\n  const onAssignIdChanged = (assignId: string) => {\n    let assigns = props.assignments.filter((x)=>x.assignId == assignId);\n    if(assigns.length > 0){\n      let assign = assigns[0];\n      let newSession = makeNewSession(props.session!, assignId, assign.items[0]);\n      props.onSessionUpdated(newSession);\n    }\n  }\n\n  const onItemIdChanged = (itemId: string) => {\n    const assig = findCurrentAssignment(props.session, props.assignments);\n    if (assig && assig.items.indexOf(itemId) >= 0) {\n      let newSession = makeNewSession(props.session!, assig.assignId, itemId);\n      props.onSessionUpdated(newSession);\n    }\n  }\n\n  return (\n\n    <Stack tokens={{ childrenGap: 5, padding: 10 }}>\n      <LoginStatus user={props.user} login_fn={props.login_fn} logout_fn={props.logout_fn} />\n      <Session session={props.session}></Session>\n      <Tasks\n        session={props.session}\n        assignments={props.assignments}\n        annotations={props.annotations}\n        onItemIdChanged={onItemIdChanged}\n        onAssignIdChanged={onAssignIdChanged}></Tasks>\n    </Stack>\n  )\n}\n\n\nexport default Controller;","import React from 'react';\nimport { PretaggedToken } from '../datatypes';\nimport { Stack, mergeStyles, IStyle } from '@fluentui/react';\nimport './token.css';\n\nexport interface ITokenProps {\n  token: PretaggedToken;\n  isFocus: boolean;\n}\n\nexport function Token(props: ITokenProps) {\n  let { token, isFocus } = props;\n  let wordStyle = { fontSize: \"large\" };\n  let posStyle = { fontSize: \"10pt\" };\n\n  let pos = props.token[1].endsWith(\"CATEGORY\")?\n    \"\":props.token[1];\n\n  return (\n    <Stack horizontalAlign=\"center\">      \n      <div style={posStyle}>{pos}</div> {/* POS */}\n      <div\n        style={wordStyle}\n        title={`${token[2]}:${token[3]}`}\n        className={isFocus ? \"focus-token\" : \"\"}>\n        {token[0]}\n      </div> {/* Word */}\n    </Stack>\n  )\n}","import React from 'react';\nimport { PretaggedToken } from '../datatypes';\nimport { Token } from './Token';\nimport { Stack } from '@fluentui/react';\n\nexport interface ISentenceViewerData {\n  sentence: PretaggedToken[];\n  itemId: string;\n}\n\nfunction SentenceViewer(props: ISentenceViewerData) {\n  let sentence = props.sentence;\n  let itemId = props.itemId;\n\n  if (sentence === undefined) {\n    return null;\n  } else {\n    let tokenId = -1;\n    try {\n      tokenId = parseInt(itemId.split(\":\")[1]);\n    } catch (err) {\n      //pass\n    }\n\n    return (\n      <div className=\"row\">\n        <div className=\"mx-auto mt-4\">\n          <div className=\"card-body bg-light p-3 mb-3 border border-primary rounded-lg\">\n            <Stack horizontal tokens={{ childrenGap: 3 }}>\n              {sentence.map((token, index) => {\n                let isFocus = tokenId == index;\n                return (<Token token={token} isFocus={isFocus}></Token>)\n              })}\n            </Stack>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SentenceViewer;","import { SenseTreeNode, SenseTreePath, CwnSense, SenseTree } from \"../datatypes\";\nimport { IGroup, getParent } from \"@fluentui/react\";\nimport { chown } from \"fs\";\n\n\nexport interface GroupedSenses {\n  senses: CwnSense[];\n  groups: IGroup[];\n}\n\nexport function countLeaves(node: SenseTreeNode) {\n  if (node.children.length > 0) {\n    let count: number = node.children\n      .map((x) => x.node_type === \"group\" ? countLeaves(x) : 1)\n      .reduce((sum, x) => sum + x, 0);\n    return count;\n  } else {\n    return 0;\n  }\n}\n\nexport function toGroup(node: SenseTreeNode, depth = 0) {\n\n  let group_members = node.children\n    .filter((x) => x.node_type === \"group\")\n    .map((x) => toGroup(x, depth + 1))\n\n\n  let group = {\n    key: node.node_id,\n    name: node.title,\n    data: {\n      tag: node.tag,\n      description: node.description,\n      allCount: countLeaves(node)\n    },\n    level: depth,\n    children: group_members\n  } as IGroup;\n\n  return group;\n}\n\nexport function findNode(rootNode: SenseTreeNode,\n  predicate: (node: SenseTreeNode) => boolean): SenseTreeNode | null {\n\n  const nodeList = findNodes(rootNode, predicate);\n  const node = nodeList.length > 0 ? nodeList[0] : null;\n\n  return node;\n\n}\n\nexport function findNodes(rootNode: SenseTreeNode,\n  predicate: (node: SenseTreeNode) => boolean): SenseTreeNode[] {\n\n  let nodeTraces = findNodeTrace(rootNode, predicate);\n  let nodes = nodeTraces.map((path) => {\n    return path[path.length - 1]\n  });\n  return nodes;\n}\n\nfunction findNodeTrace(\n  rootNode: SenseTreeNode,\n  predicate: (node: SenseTreeNode) => boolean): SenseTreePath[] {\n\n  let buf: [SenseTreeNode, SenseTreePath][] = [[rootNode, []]];\n  let results: SenseTreePath[] = [];\n  while (buf.length > 0) {\n    const [cur_node, path] = buf.pop() as [SenseTreeNode, SenseTreePath];\n    const cur_path = [...path, cur_node];\n    if (predicate(cur_node)) {\n      results.push(cur_path);\n    }\n\n    cur_node.children.map((x) => buf.push([x, cur_path]));\n  }\n\n  return results;\n}\n\nexport function findParent(\n  rootNode: SenseTreeNode, target: SenseTreeNode): SenseTreeNode | null {\n  let paths = findNodeTrace(rootNode, (x) => x == target);\n  if (paths.length && paths[0].length > 1) {\n    return paths[0][paths[0].length - 2];\n  } else {\n    return null;\n  }\n}\n\nexport function moveNode(\n  root: SenseTreeNode,\n  srcNode: SenseTreeNode,\n  tgtNode: SenseTreeNode): SenseTreeNode {\n\n  let newRoot = Object.assign({}, root);\n  const tgtParent = findParent(root, tgtNode)\n  const srcParent = findParent(root, srcNode);\n\n  // debugger;\n  if (tgtNode.node_type === \"group\") {\n    // it is a group node\n    if (srcParent) {\n      // remove srcNode from its parent\n      const srcIndex = srcParent.children.indexOf(srcNode);\n      srcParent.children.splice(srcIndex, 1);\n\n      tgtNode.children.push(srcNode);\n    }\n  } else {\n    // it is a leaf(sense) node    \n\n    if (tgtParent && srcParent) {\n      // remove srcNode from its parent      \n      const srcIndex = srcParent.children.indexOf(srcNode);\n      srcParent.children.splice(srcIndex, 1);\n\n      // add srcNode to tgtParent\n      const nodeList = tgtParent.children;\n      const tgtIndex = nodeList.indexOf(tgtNode);\n      let newNodeList = [\n        ...nodeList.slice(0, tgtIndex + 1),\n        srcNode,\n        ...nodeList.slice(tgtIndex + 1, nodeList.length)]\n      tgtParent.children = newNodeList;\n    }\n\n  }\n\n\n  return newRoot;\n}\n\ntype LeafTuple = { node: SenseTreeNode, parent: SenseTreeNode | null };\nexport function getLeaves(\n  node: SenseTreeNode, parent: SenseTreeNode | null = null):\n  LeafTuple[] {\n  if (node.children.length > 0) {\n    return node.children.map((x) => getLeaves(x, node)).flat();\n  } else {\n    return [{ node, parent }];\n  }\n}\n\nexport function getGroupedSenses(\n  node: SenseTreeNode,\n  ref_senses: CwnSense[]): GroupedSenses {\n\n  type SenseTuple = { sense: CwnSense, parent: SenseTreeNode | null };\n\n  const leaf_nodes = getLeaves(node);\n\n\n  const sense_nodes = leaf_nodes\n    .map((x) => {\n      const idx = ref_senses\n        .map((x) => x.cwn_id)\n        .indexOf(x.node.node_id)\n      let sense_x = null;\n      if (idx >= 0) {\n        sense_x = ref_senses[idx];\n      }\n      return { sense: sense_x, parent: x.parent } as SenseTuple;\n    })\n    .filter((x) => !!x.sense);\n\n  const items = sense_nodes.map((x) => x.sense);\n  const parents = sense_nodes.map((x) => x.parent);\n  const group_map = items.reduce((obj, item_x, i) => {\n    const parent_x = parents[i];\n    const parent_id = parent_x ? parent_x.node_id : \"__null__\";\n    obj[parent_id] = [...obj[parent_id] || [], item_x];\n    return obj;\n  }, {} as { [key: string]: CwnSense[] })\n\n  const out_items = Object.values(group_map).flat();\n  const out_groups = Object.keys(group_map).map((node_id: string) => {\n    let values = group_map[node_id];\n    let groupNode = findNode(node, (x) => x.node_id === node_id);\n    let groupTitle = (groupNode?.title) ? (groupNode?.title) : node_id;\n\n    return {\n      count: values.length,\n      startIndex: out_items.indexOf(values[0]),\n      key: node_id,\n      name: groupTitle,\n      data: parents.filter((x) => x && (x.node_id == node_id))[0],\n      level: 0\n    } as IGroup\n  });\n\n  return { senses: out_items, groups: out_groups } as GroupedSenses;\n}\n\nexport function makeSenseTreeGroupNode(title: string = \"\") {\n  return {\n    node_id: `group-${Date.now()}`,\n    description: \"\",\n    node_type: \"group\",\n    title: title.length > 0 ? title : \"New Group\",\n    tag: \"\",\n    children: []\n  } as SenseTreeNode;\n}\n\nexport function makeSenseTreeSenseNode(sense: CwnSense) {\n  return {\n    node_id: sense.cwn_id,\n    description: \"\",\n    node_type: \"sense\",\n    title: `(${sense.pos})${sense.definition}`,\n    tag: \"\",\n    children: []\n  } as SenseTreeNode;\n}\n\nexport function checkSenseTree(senseTree: SenseTree, senses: CwnSense[]) {\n  const root = senseTree.root;\n  const senseNodeIds = getLeaves(root)\n    .filter((x) => x.node.node_type == \"sense\")\n    .map((x) => x.node.node_id);\n  \n  let orphanSenses = senses.filter((x) => senseNodeIds.indexOf(x.cwn_id) < 0)\n  if (orphanSenses.length > 0) {\n    let orphanGroup = makeSenseTreeGroupNode();\n    orphanGroup.children = orphanSenses.map(makeSenseTreeSenseNode);\n    root.children.push(orphanGroup);\n  }\n\n  return senseTree;\n}\n\nexport function removeGroupNode(root: SenseTreeNode, node: SenseTreeNode) {\n  const children = node.children;\n  const parent = findParent(root, node);\n  if (parent) {\n    root.children.push(...children);\n    parent.children = parent.children.filter((x) => x !== node);\n  }\n  return root;\n\n}\n\nexport function addGroupNode(root: SenseTreeNode) {\n  let newNode = makeSenseTreeGroupNode();\n  root.children.unshift(newNode);\n  return root;\n}","import { SenseRevision, Trial, CwnSense, SenseTree } from \"../datatypes\";\nimport { findNodes, getLeaves, makeSenseTreeGroupNode } from \"./tree_utils\";\n\nexport function makeNewSenseRevision(trial: Trial): SenseRevision {\n  const revision = {\n    annotator: trial.userEmail,\n    timestamp: Date.now(),\n    assignId: trial.assignId,\n    itemId: trial.itemId,\n    candidates: [],\n    probs: []\n  };\n\n  return revision;\n}\n\nexport function makeNewSenseTree(trial: Trial): SenseTree{\n  let senseTree = {\n    annotator: trial.userEmail,\n    annotatorId: trial.userId,\n    timestamp: Date.now(),\n    lemma: trial.token[0],\n    root: makeSenseTreeGroupNode(\"Root Group\")\n  } as SenseTree;\n\n  return senseTree;\n}\n\nfunction findSense(cwn_id: string, senses: CwnSense[]) {\n  let index = senses.map((x) => x.cwn_id).indexOf(cwn_id);\n\n  if (index < 0) {\n    return null;\n  } else {\n    return senses[index];\n  }\n}\n\nexport function parseFilter(filter: string, senses: CwnSense[], senseTree: SenseTree|null) {\n\n  const tokens = filter.split(\">>\");\n  const filterStr = tokens[0];\n\n  let serial = -1;\n  if (tokens.length > 1) {\n    serial = parseInt(tokens[1]) ? parseInt(tokens[1]) : -1;\n  }\n\n  let senseInGroups: CwnSense[] = [];\n  if (senseTree) {\n    //debugger;\n    let groups = findNodes(senseTree.root,\n      (x) => x.node_type == \"group\" &&\n        ((x.title.indexOf(filterStr) >= 0) || x.tag?.indexOf(filterStr) >= 0));\n    senseInGroups = groups.map((x) => getLeaves(x))\n      .flatMap((leafs) => leafs\n        .filter((leaf) => leaf.node.node_type == \"sense\")\n        .map((leaf) => findSense(leaf.node.node_id, senses)))\n      .filter((x) => x !== null) as CwnSense[];\n  }\n\n  if (senseInGroups.length > 0) {\n    return serial >= 0 ? [senseInGroups[serial]] : senseInGroups;\n  } else {\n    return senses.filter((x) => {\n      x.cwn_id.startsWith(filterStr) || x.pos.startsWith(filterStr)\n    });\n  }\n}\n\n","import { User, PretaggedToken, SenseRevision, CwnSense, SenseTree, Trial, Annotations } from \"../datatypes\";\nimport { fetchAnnotations, fetchSenses } from \"../DataHandler\";\nimport { fetchSenseTree } from \"../DataHandler/getData\";\nimport { makeNewSenseTree } from \"./sorter_utils\";\n\ntype StateSetter<T> = React.Dispatch<React.SetStateAction<T>>\n\nexport async function updateSenses(\n  trial: Trial,\n  senseSetter: StateSetter<CwnSense[]>) {\n\n  let token = trial.token;\n  let senses = [] as CwnSense[];\n  if (token) {\n    let lemma = token[0];\n    try {\n      senses = await fetchSenses(lemma);\n    } catch (err) {\n      console.error(err);\n    }\n  }  \n  senseSetter(senses);  \n}\n\nexport async function initSenseTree(\n  trial: Trial) {\n\n\n  let senseTree: SenseTree | null = null;\n  if (trial) {\n    const userEmail = trial.userEmail;\n    const token = trial.token;\n    const lemma = token[0];\n    try {\n      senseTree = await fetchSenseTree(userEmail, lemma);\n    } catch (err) {\n      // console.error(err);\n    }\n\n    if (senseTree === null) {\n      senseTree = makeNewSenseTree(trial);\n    }\n  }  \n  return senseTree;\n}\n\n","import React, { useRef } from 'react';\nimport { TooltipHost, TooltipDelay, DirectionalHint, Persona, PersonaInitialsColor, PersonaSize } from '@fluentui/react';\nimport { CwnSense } from '../datatypes';\nimport { useDrag, useDrop } from 'react-dnd';\n\nexport interface ISenseItemData {\n  sense: CwnSense;\n  index: number;  \n  onDragAndDrop: (srcSenseId: string, tgtSenseId: string)=>void;\n  onClick: ()=>void;\n}\n\nexport interface SenseDragItem {\n  type: \"leaf-node\",\n  senseId: string;\n}\n\nfunction examplesTooltips(examples: string[]) {\n  return {\n    onRenderContent: () => {\n      return (<ul>\n        {examples.map((x) => (<li>{x}</li>))}\n      </ul>)\n    }\n  }\n}\n\nexport function SenseItem(props: ISenseItemData) {\n  const { sense, index } = props;\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [{}, drag] = useDrag({\n    item: { type: \"leaf-node\", senseId: sense.cwn_id },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  });\n\n  const [{}, drop] = useDrop({\n    accept: \"leaf-node\",\n    drop: (item: SenseDragItem, monitor) => {\n      // console.log(item, monitor);\n      props.onDragAndDrop(item.senseId, sense.cwn_id);\n    },\n\n    canDrop: (item, monitor) => {\n      return true;\n    },\n  });\n\n  drag(drop(ref));\n  if (sense && index !== undefined) {\n    return (\n      <div ref={ref}>\n        <TooltipHost\n          tooltipProps={examplesTooltips(sense.examples)}\n          id={\"tp\" + sense.cwn_id}\n          delay={TooltipDelay.long}\n          directionalHint={DirectionalHint.rightCenter}\n        >\n          <Persona\n            imageInitials={sense.pos}\n            initialsColor={(index % 6) as PersonaInitialsColor}\n            text={sense.definition}\n            secondaryText={sense.examples[0]}\n            size={PersonaSize.size32}            \n            showSecondaryText={true}\n            onClick={props.onClick}            \n            styles={{\n              root: { marginTop: \"7px\", userSelect: \"none\" },\n              primaryText: { fontSize: \"11pt\", userSelect: \"none\" },\n              secondaryText: { fontSize: \"8pt\", color: \"gray\", userSelect: \"none\" }\n            }}\n          />\n        </TooltipHost>\n      </div>\n    )\n  } else {\n    return (<div></div>)\n  }\n\n}\nexport default SenseItem;","import React from 'react';\nimport { CwnSense, SenseTree, SenseTreePath } from '../datatypes';\nimport { DetailsList, DetailsListLayoutMode, Selection, SelectionMode, List, Persona, PersonaSize, PersonaInitialsColor, TooltipHost, DirectionalHint, TooltipDelay, IGroup, GroupedList, Breadcrumb } from '@fluentui/react';\nimport { useDrop } from 'react-dnd';\nimport { GroupedSenses, findNode, moveNode, findNodes } from './tree_utils';\nimport SenseItem from './SenseItem';\n\nexport interface ISenseListProps {\n  senseTree: SenseTree | null;\n  groupedSenses: GroupedSenses;\n  onSenseTreeUpdated: (tree: SenseTree) => void;\n  onSenseSelected: (sense: CwnSense) => void;\n}\n\nlet selectionModel = new Selection({\n  onSelectionChanged: () => {\n    console.log(selectionModel.getSelection());\n  }\n});\n\n\nexport function SenseList(props: ISenseListProps) {\n  \n  let senses: CwnSense[] = [];\n  let groups: IGroup[] = [];\n  if (Object.keys(props.groupedSenses).length > 0) {\n    senses = props.groupedSenses.senses;\n    groups = props.groupedSenses.groups;\n  }\n\n  function onSenseDragAndDrop(srcSenseId: string, tgtSenseId: string) {\n    const senseTree = props.senseTree;\n    if (senseTree) {\n      const srcNode = findNode(senseTree.root, (x) => x.node_id == srcSenseId);\n      const tgtNode = findNode(senseTree.root, (x) => x.node_id == tgtSenseId);\n\n      if (srcNode && tgtNode) {\n        const newRoot = moveNode(senseTree.root, srcNode, tgtNode);\n        const newTree = Object.assign({}, senseTree);\n        newTree.timestamp = Date.now();\n        newTree.root = newRoot;\n        props.onSenseTreeUpdated(newTree);\n      }\n    }\n  }\n\n  function renderCell(nestingDepth?: number,\n    sense?: CwnSense, index?: number) {\n\n    if (sense && index !== undefined) {\n      return (\n        <SenseItem\n          sense={sense} index={index}\n          onDragAndDrop={onSenseDragAndDrop}\n          onClick={() => props.onSenseSelected(sense)}\n        />\n      )\n    }\n  }\n\n  return (\n    <div\n      id=\"unique-sense-list-id\"\n      ref={null/*drop*/}\n      style={{\n        height: \"500px\",\n        overflowX: \"hidden\", overflowY: \"scroll\"\n      }}>\n      <GroupedList\n        items={senses}\n        groups={groups}\n        onRenderCell={renderCell}\n        compact={true}\n        selectionMode={SelectionMode.none}\n        groupProps={\n          { showEmptyGroups: true }\n        }\n      />\n    </div>\n  )\n}","import React, { useState } from \"react\";\nimport { FocusTrapCallout, Stack, Label, TextField, mergeStyleSets, Button, PrimaryButton } from \"@fluentui/react\";\n\nexport interface IGroupInfo {\n  title: string;\n  tag: string;\n}\n\nexport interface IGroupInfoEditProps {\n  elemId: string;\n  groupInfo: IGroupInfo;\n  onGroupInfoUpdate: (info: IGroupInfo) => void;\n  onDismiss: () => void;\n}\n\nexport function GroupInfoEdit(props: IGroupInfoEditProps) {\n  const [groupInfo, setGroupInfo] = useState(props.groupInfo);\n\n  const styles = mergeStyleSets({\n    root: { padding: \"5%\" },\n    label: { width: \"60px\", margin: \"1% 0%\" },\n    textInput: {}\n  })\n\n  const onSave = () => {\n    setGroupInfo(groupInfo);\n    props.onGroupInfoUpdate(groupInfo);\n    props.onDismiss();\n  }\n\n  return (\n    <FocusTrapCallout\n      role=\"alertdialog\"\n      gapSpace={0}\n      target={`#${props.elemId}`}\n      onDismiss={props.onDismiss}\n      setInitialFocus\n    >\n      <Stack className={styles.root}>\n        <Stack horizontal>\n          <Label className={styles.label}>Title</Label>\n          <TextField className={styles.textInput}\n            onChange={(ev, newvalue) => setGroupInfo({ ...groupInfo, title: newvalue ? newvalue : \"\" })}\n            defaultValue={groupInfo.title}></TextField>\n        </Stack>\n        <Stack horizontal>\n          <Label className={styles.label}>Tag</Label>\n          <TextField className={styles.textInput}\n            onChange={(ev, newvalue) => setGroupInfo({ ...groupInfo, tag: newvalue ? newvalue : \"\" })}\n            defaultValue={groupInfo.tag}></TextField>\n        </Stack>\n        <Stack horizontal horizontalAlign=\"end\" tokens={{ childrenGap: \"10px\" }}\n          styles={{ root: { paddingTop: \"16px\" } }}>\n          <Button onClick={props.onDismiss}>Cancel</Button>\n          <PrimaryButton onClick={onSave}>Save</PrimaryButton>\n        </Stack>\n      </Stack>\n\n    </FocusTrapCallout>\n  )\n}\n\n","import { useDrop, useDrag } from \"react-dnd\";\nimport React, { useRef, useState } from \"react\";\nimport { Link, IGroupHeaderProps, IconButton, Stack, IGroup } from \"@fluentui/react\";\nimport { SenseDragItem } from \"./SenseItem\";\nimport { GroupInfoEdit, IGroupInfo } from \"./GroupInfoEdit\";\n\ninterface GroupDragItem {\n  type: \"group-node\";\n  nodeId: string;\n}\n\nexport interface GroupHeaderDndHandler {\n  onDragAndDrop: (srcNodeId: string, tgtNodeId: string) => void;\n  onGroupHeaderUpdate: (groupInfo: IGroupInfo) => void;\n  onDeleteGroup: (group: IGroup) => void;\n  deleteState: boolean;\n}\n\nexport function SenseTreeGroupHeader(props: IGroupHeaderProps & GroupHeaderDndHandler) {\n  const toggleCollapse = (): void => {\n    props.onToggleCollapse!(props.group!);\n  };\n\n  const [editVisibility, setEditVisibility] = useState(false);\n  const toggleEditVisibility = () => {\n    setEditVisibility(!editVisibility);\n  }  \n\n  const ref = useRef<HTMLDivElement>(null);\n  const [{ isOver, canDrop }, drop] = useDrop({\n    accept: [\"group-node\", \"leaf-node\"],\n    drop: (item: GroupDragItem | SenseDragItem, monitor) => {\n      let groupNodeId = props.group!.key;\n      if (item.type == \"group-node\") {\n        props.onDragAndDrop(item.nodeId, groupNodeId);\n      } else {\n        props.onDragAndDrop(item.senseId, groupNodeId);\n      }\n\n    },\n    canDrop: (item, monitor) => {\n      if (item.type == \"leaf-node\"){\n        return true;\n      } else {\n        return item.nodeId != props.group!.key;\n      }\n      \n    },\n  });\n\n  const [{ isDragging }, drag, preview] = useDrag({\n    item: { type: \"group-node\", nodeId: props.group!.key },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  });\n\n  if (props.group) {\n    drag(drop(ref));\n\n    const groupInfo = { title: props.group.name, tag: props.group.data.tag }\n    const tag = groupInfo.tag;\n    let groupButton = null;\n    if (props.group.isCollapsed) {\n      groupButton = (<IconButton onClick={toggleCollapse} iconProps={{ iconName: \"ChevronDown\" }} title=\"展開\" />)\n    } else {\n      groupButton = (<IconButton onClick={toggleCollapse} iconProps={{ iconName: \"ChevronRight\" }} title=\"收起\" />)\n    }\n\n    let allCount = props.group.data.allCount;\n    let countStr = allCount || allCount === 0 ? `(${props.group.data.allCount})` : \"\";\n    let deleteButton = props.deleteState ? (\n      <IconButton iconProps={{ iconName: \"Delete\" }}\n        onClick={()=>props.onDeleteGroup(props.group!)} />\n      ) : null;\n\n    let editCallout = editVisibility ? (\n      <GroupInfoEdit\n        elemId={`group-header-${props.group.key}`}\n        groupInfo={groupInfo}\n        onDismiss={toggleEditVisibility}\n        onGroupInfoUpdate={props.onGroupHeaderUpdate}></GroupInfoEdit>) : null;\n\n    return (\n      <div ref={ref} className=\"d-flex p-1 align-items-baseline user-select-none\"\n        style={{ marginLeft: props.groupLevel! * 20 }}>\n        {editCallout}\n        {groupButton}\n        <Stack\n          id={`group-header-${props.group.key}`}\n          horizontal\n          verticalAlign=\"baseline\"\n          horizontalAlign=\"space-between\"\n          onClick={() => props.onGroupHeaderClick!(props.group!)}\n          onDoubleClick={() => toggleEditVisibility()}>\n          {deleteButton}\n          {(tag && tag.length > 0)?\n            <h6><span className=\"badge bg-primary\">{tag}</span>&nbsp;</h6>:null }\n          <h6>{props.group.name} {countStr}</h6>\n        </Stack>\n      </div>\n    );\n  } else {\n    return (<div></div>)\n  }\n}","import React, { useState, useEffect, useCallback } from 'react';\nimport { SenseTree, Trial, SenseTreeNode } from '../datatypes';\nimport { Depths } from '@uifabric/fluent-theme/lib/fluent/FluentDepths'\nimport { GroupedList, Selection, SelectionMode, IGroup, Link, IGroupHeaderProps, Stack, IconButton } from '@fluentui/react';\nimport { toGroup, findNode, moveNode, removeGroupNode, addGroupNode } from './tree_utils';\nimport { useDrop } from 'react-dnd';\nimport { SenseTreeGroupHeader } from './SenseTreeGroupHeader';\nimport { IGroupInfo } from './GroupInfoEdit';\n\nexport interface ISenseTreeViewProps {\n  senseTree: SenseTree | null;\n  onSenseTreeUpdated: (tree: SenseTree | null) => void;\n  onSelectedNodeUpdated: (node: SenseTreeNode | null) => void;\n}\n\n\n\nexport function SenseTreeView(props: ISenseTreeViewProps) {\n  let senseTree = props.senseTree;\n  const [deleteState, setDeleteState] = useState(false);\n\n  const onRenderCell = (nestingDepth?: number, item?: SenseTreeNode, itemIndex?: number): JSX.Element => {\n    return (<div></div>);\n  }\n\n  const onGroupHeaderDrangAndDrop = (srcNodeId: string, tgtNodeId: string) => {\n    const senseTree = props.senseTree;\n    if (senseTree) {\n      const srcNode = findNode(senseTree.root, (x) => x.node_id == srcNodeId);\n      const tgtNode = findNode(senseTree.root, (x) => x.node_id == tgtNodeId);\n\n      if (srcNode && tgtNode) {\n        const newRoot = moveNode(senseTree.root, srcNode, tgtNode);\n        const newTree = Object.assign({}, senseTree);\n        newTree.timestamp = Date.now();\n        newTree.root = newRoot;\n        props.onSenseTreeUpdated(newTree);\n        console.log(newTree);\n      }\n    }\n  }\n\n  const onRenderHeader = (headerProps?: IGroupHeaderProps): JSX.Element => {\n    const onGroupHeaderUpdate = (groupInfo: IGroupInfo) => {\n      let groupId = headerProps?.group?.key;\n      if (groupId && senseTree) {\n        let newTree = Object.assign({}, senseTree)\n        let groupNode = findNode(newTree.root, (x) => x.node_id == groupId);\n        if (groupNode) {\n          groupNode.title = groupInfo.title;\n          groupNode.tag = groupInfo.tag;\n\n          props.onSenseTreeUpdated(newTree);\n        }\n      }\n\n    }\n\n    if (headerProps) {\n      let elemProps = {\n        ...headerProps,\n        onDragAndDrop: onGroupHeaderDrangAndDrop,\n        onGroupHeaderUpdate: onGroupHeaderUpdate,\n        onDeleteGroup: deleteGroup,\n        deleteState: deleteState,\n      }\n      return (<SenseTreeGroupHeader {...elemProps}\n      />)\n    } else {\n      return (<div></div>)\n    }\n\n  };\n\n  const onGroupClicked = (group: IGroup) => {\n    if (senseTree) {\n      const node = findNode(senseTree?.root, (x) => x.node_id == group.key);\n      node && props.onSelectedNodeUpdated(node);\n    }\n  }\n\n  const addGroup = () => {\n    if (senseTree) {\n      let newTree = Object.assign({}, senseTree);\n      newTree.root = addGroupNode(newTree.root);\n      newTree.timestamp = Date.now();\n      props.onSenseTreeUpdated(newTree);\n    }\n  }\n\n  const deleteGroup = (group: IGroup) => {\n    if (senseTree) {\n      const node = findNode(senseTree.root, (x) => x.node_id == group.key);\n      if (node) {\n        let newTree = Object.assign({}, senseTree);\n        let newRoot = removeGroupNode(newTree.root, node);\n        newTree.timestamp = Date.now();\n        props.onSenseTreeUpdated(newTree);\n      }\n    }\n  }\n\n  const toggleDeleteState = () => {\n    setDeleteState(!deleteState);\n  }\n\n  if (senseTree) {\n    return (\n      <div className=\"p-3\"\n        style={{ boxShadow: Depths.depth8 }}>\n        {/* treeData={props.senseTree.children as TreeItem[]} */}\n        <Stack>\n          <Stack.Item>\n            <Stack horizontal horizontalAlign=\"end\">\n              <IconButton\n                iconProps={{ iconName: \"Add\" }}\n                onClick={addGroup}\n                title=\"New Group\" />\n              <IconButton title=\"Delete\"\n                iconProps={{ iconName: \"Delete\" }}\n                onClick={toggleDeleteState}\n                checked={deleteState}\n              />\n            </Stack>\n          </Stack.Item>\n          <Stack.Item>\n            <div style={{ height: 468, overflowY: \"auto\" }}>\n              <GroupedList\n                items={[]}\n                groups={[senseTree.root].map(toGroup)}\n                onRenderCell={onRenderCell}\n                selectionMode={SelectionMode.none}\n                groupProps={\n                  {\n                    onRenderHeader: onRenderHeader,\n                    showEmptyGroups: true,\n                    headerProps: {\n                      onGroupHeaderClick: onGroupClicked\n                    }\n                  }\n                }\n                compact={true}\n              />\n            </div>\n          </Stack.Item>\n        </Stack>\n      </div>\n    )\n  } else {\n    return null;\n  }\n}","import React from 'react';\nimport { CwnSense } from \"../datatypes\";\nimport { CompactPeoplePicker, IBasePickerProps, IPersonaProps, PersonaInitialsColor } from \"@fluentui/react\";\n\nexport interface ISensePickerProps {\n  senseCandidates: CwnSense[];\n  onSenseSuggestions: (filter: string) => CwnSense[];\n  onPickerChanged: (senseIds: string[]) => void;\n}\n\nexport function SensePicker(props: ISensePickerProps) {\n  function onFilterChanged(filter: string) {\n    let senses = props.onSenseSuggestions(filter);\n    return senses.map((sense, index) => {\n      return {\n        imageInitials: sense.pos,\n        initialsColor: (index % 6) as PersonaInitialsColor,\n        text: sense.definition,\n        optionalText: sense.cwn_id\n      }\n    });\n  }\n\n  const onSelectedItemsChange = (items?: IPersonaProps[]) => {\n    if (items) {\n      props.onPickerChanged(items.map((x) => {\n        return x.optionalText?x.optionalText:\"\"\n      }));\n    }\n  }\n\n  let selectedItems = props.senseCandidates.map((sense) => {\n    return {\n      imageInitials: sense.pos,\n      initialsColor: PersonaInitialsColor[0],\n      text: sense.definition,\n      optionalText: sense.cwn_id,\n      styles: {primaryText: {fontSize: \"8pt\"}}\n    }\n  });\n\n  return (\n    <CompactPeoplePicker\n      selectedItems={selectedItems}\n      onResolveSuggestions={onFilterChanged}\n      onChange={onSelectedItemsChange}      \n    />\n  )\n}","import React, { useState } from 'react';\nimport { SenseRevision, CwnSense, SenseTree } from '../datatypes';\nimport { Stack, IconButton, Announced, Rating } from '@fluentui/react';\nimport { SensePicker } from './SensePicker';\nimport { parseFilter } from './sorter_utils';\n\nexport interface IRevisionViewProps {\n  revision: SenseRevision | null;\n  senses: CwnSense[],\n  senseTree: SenseTree|null,\n  onSenseRevisionUpdated: (revision: SenseRevision) => void;\n}\n\nexport function RevisionView(props: IRevisionViewProps) {\n  let revision = props.revision;\n  let iconStyle = { height: \"30px\", width: \"30px\", fontSize: \"100px\" };\n  const [isAmbig, setIsAmbig] = useState(false);\n  const [rating, setRating] = useState(3);\n\n  if (revision) {\n\n    const onFilterSenses = (filter: string) => {\n      return parseFilter(filter, props.senses, props.senseTree);\n    }\n\n    const onRevisionUpdated = (newRevision: SenseRevision) => {\n      props.onSenseRevisionUpdated(newRevision);\n    }\n\n    const onSenseCandidatesUpdated = (newCandidates: string[]) => {\n      let newRevision = Object.assign({}, revision);\n      newRevision.candidates = newCandidates;\n      newRevision.timestamp = Date.now();\n      onRevisionUpdated(newRevision);\n    }\n\n    const onRatingChanged = (score: number) => {\n      setRating(score);\n    }\n\n    const toggleIsAmbig = () => { setIsAmbig(!isAmbig) };\n\n    let selectedSenses: CwnSense[] = [];\n    if (props.revision) {\n      selectedSenses = props.revision.candidates.map((x) => {\n        let targets = props.senses.filter((sense) => sense.cwn_id == x);\n        return (targets && targets.length > 0) ? targets[0] : null;\n      }).filter((x) => x !== null) as CwnSense[];\n    }\n\n    const ratingElem = isAmbig ? (\n      <Stack.Item styles={{ root: { width: \"120px\" } }}><Rating\n        title=\"我覺得自己非常不確定（1）到非常確定（5）\"\n        min={1}\n        max={5}\n        rating={rating}\n        onChange={(ev, value) => value ? onRatingChanged(value) : null}\n        icon=\"CircleFill\"\n        unselectedIcon=\"CircleRing\"\n      /></Stack.Item>) : null;\n\n    return (\n      <Stack horizontal styles={{ root: { width: \"100%;\" } }}>\n        <Stack.Item grow={1}>\n          <SensePicker\n            senseCandidates={selectedSenses}\n            onPickerChanged={onSenseCandidatesUpdated}\n            onSenseSuggestions={onFilterSenses}\n          />\n        </Stack.Item>\n        {ratingElem}\n        <Stack.Item styles={{ root: { width: \"100px\" } }}>\n          <Stack tokens={{ childrenGap: 2 }} horizontal horizontalAlign=\"end\">\n            <IconButton style={iconStyle}\n              iconProps={{ iconName: 'CheckMark' }}\n              title=\"確認\" ariaLabel=\"CheckMark\"\n            />\n            <IconButton style={iconStyle}\n              iconProps={{ iconName: 'Communications' }}\n              title=\"需要討論\" ariaLabel=\"Communications\"\n              onClick={toggleIsAmbig} />\n          </Stack>\n        </Stack.Item>\n      </Stack>\n    )\n  } else {\n    return null;\n  }\n}","import React, { useState, useEffect } from 'react';\nimport { CwnSense, SenseTree, Annotations, SenseRevision, Trial, SenseTreeNode } from '../datatypes';\nimport { updateSenses, initSenseTree } from './sorter_updater';\nimport { SenseList } from './SenseList';\nimport { SenseTreeView } from './SenseTreeView';\nimport { RevisionView } from './RevisionView';\nimport { getGroupedSenses, GroupedSenses, checkSenseTree } from './tree_utils';\nimport { makeNewSenseRevision } from './sorter_utils';\nimport { uploadSenseTree } from './sorter_uploader';\n\n\nexport interface ISenseSorterData {\n  trial: Trial;\n  annotations: Annotations;\n  onSenseRevisionUpdated: (trial: Trial, senseRevision: SenseRevision) => void;\n}\n\nfunction getSenseRevision(\n  trial: Trial, annotations: Annotations) {\n\n  const itemId = trial.itemId;\n  const assignId = trial.assignId;\n  let revision = makeNewSenseRevision(trial);\n\n  if (assignId && itemId) {\n    let annot = annotations[assignId];\n    if (annot && itemId in annot.results) {\n      revision = annot.results[itemId];\n    }\n  }\n\n  return revision;\n}\n\nfunction SenseSorter(props: ISenseSorterData) {\n  // let senseData = props.senseData;\n\n  const [senses, setSenses] = useState([] as CwnSense[]);\n  const [senseTree, setSenseTree] = useState<SenseTree | null>(null);\n  const [selectedNode, setSelectedNode] = useState<SenseTreeNode | null>(null);\n  const [selectedGroups, setSelectedGroups] = useState<GroupedSenses>({} as GroupedSenses);\n  // const senseRevision = getSenseRevision(props.trial, props.annotations);\n  \n  useEffect(() => {\n    updateSenses(props.trial, setSenses);    \n  }, [props.trial]);\n\n  useEffect(() => {\n    initSenseTree(props.trial)\n      .then((senseTree) => onSenseTreeUpdated(senseTree, senses))\n      .catch((err) => console.error(err));\n  }, [props.trial, senses]);\n\n  useEffect(() => {\n    let groupedSenses = null;\n    if (selectedNode) {\n      groupedSenses = getGroupedSenses(selectedNode, senses);\n    } else {\n      if (senseTree) {\n        groupedSenses = getGroupedSenses(senseTree.root, senses);\n      } else {\n        groupedSenses = { senses: [], groups: [] } as GroupedSenses;\n      }\n    }\n\n    setSelectedGroups(groupedSenses);\n  }, [selectedNode, senseTree]);\n\n  function onSenseTreeUpdated(newTree: SenseTree | null, senses: CwnSense[]) {\n    if (newTree) {\n      newTree = checkSenseTree(newTree, senses);          \n      uploadSenseTree(props.trial, newTree);\n    }\n    setSenseTree(newTree);\n  }\n\n  const onSelectedGroupUpdated = (node: SenseTreeNode | null) => {\n    setSelectedNode(node);\n  }\n\n  const onSenseSelected = (sense: CwnSense) => {\n    const senseRevision = getSenseRevision(props.trial, props.annotations);\n    let newRevision = Object.assign({}, senseRevision);\n    newRevision.timestamp = Date.now();\n    if (newRevision.candidates.indexOf(sense.cwn_id) < 0) {\n      newRevision.candidates.push(sense.cwn_id);\n      newRevision.probs = newRevision.candidates\n        .map((x) => 1 / (newRevision.candidates.length));\n      onSenseRevisionUpdated(newRevision);\n    }\n\n\n  }\n\n  const onSenseRevisionUpdated = (newRevision: SenseRevision) => {\n    props.onSenseRevisionUpdated(props.trial, newRevision);\n  }\n  \n  const senseRevision = getSenseRevision(props.trial, props.annotations);\n  let borderStyle = { border: \"2px solid black\" };\n    \n  return (\n    <>\n      <div className=\"row\">\n        <RevisionView\n          revision={senseRevision}\n          senses={senses}\n          senseTree={senseTree}\n          onSenseRevisionUpdated={onSenseRevisionUpdated} />\n      </div>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <SenseTreeView\n            senseTree={senseTree}            \n            onSelectedNodeUpdated={onSelectedGroupUpdated}\n            onSenseTreeUpdated={(senseTree) => onSenseTreeUpdated(senseTree, senses)}\n          />\n        </div>\n        <div className=\"col-6\">\n          <SenseList\n            senseTree={senseTree}\n            groupedSenses={selectedGroups}\n            onSenseTreeUpdated={(senseTree) => onSenseTreeUpdated(senseTree, senses)}\n            onSenseSelected={onSenseSelected} />\n        </div>\n      </div>\n    </>\n  )\n\n}\n\nexport default SenseSorter;\n","import { Trial, SenseTree } from \"../datatypes\";\nimport firebase from \"firebase\";\n\nexport function uploadSenseTree(trial: Trial, senseTree: SenseTree){\n  let db = firebase.firestore();\n  let userId = trial.userId;\n  let userEmail = trial.userEmail;\n  let treeId = `${userEmail}-${senseTree.lemma}`;\n  let result = db.collection(\"senseTrees\").doc(treeId).set(senseTree);\n  return result;\n}","import React, { useEffect, useState } from 'react';\nimport Controller from '../Controller/Controller';\nimport SentenceViewer from '../SentenceViewer/SentenceViewer';\nimport SenseSorter from '../SenseSorter/SenseSorter';\nimport { Assignments, Trial, Annotations, SenseRevision, Annotation } from \"../datatypes\";\nimport { User, SenseAnnotSession } from \"../datatypes\";\nimport { updateSession, updateAssignments, updateTrial, updateAnnotations, makeNewAnnotation, makeNewSession } from \"./annot_updater\";\nimport { login, logout, subscribeLoginStatus } from '../DataHandler';\nimport * as firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/analytics\";\nimport { uploadSession, uploadAnnotation } from './annot_uploader';\n\nfunction initializeFirebase() {\n  var firebaseConfig = {\n    apiKey: \"AIzaSyCtaBIZ-IiQ0a5Z0LsuEnVGmojJbY9yvMs\",\n    authDomain: \"langon-281613.firebaseapp.com\",\n    databaseURL: \"https://langon-281613.firebaseio.com\",\n    projectId: \"langon-281613\",\n    storageBucket: \"langon-281613.appspot.com\",\n    messagingSenderId: \"98385288306\",\n    appId: \"1:98385288306:web:09cdd581f06c0e3cdb76eb\",\n    measurementId: \"G-36C7NTBFN0\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  firebase.analytics();\n}\n\nfunction SenseAnnot() {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<SenseAnnotSession | null>(null);\n  const [annotations, setAnnotations] = useState({} as Annotations);\n  const [assignments, setAssignments] = useState<Assignments>([]);\n  const [trial, setTrial] = useState<Trial>({} as Trial);\n\n\n  // initialization\n  useEffect(() => {\n    initializeFirebase();\n    subscribeLoginStatus(\n      (user) => setUser(user),\n      () => setUser(null));\n  }, []);\n\n  // update session, depends on user\n  useEffect(() => { updateSession(user, setSession) }, [user]);\n  // update Assignments, depends on user\n  useEffect(() => { updateAssignments(user, setAssignments) }, [user])\n  // update annotations, depends on user\n  useEffect(() => { updateAnnotations(user, setAnnotations) }, [user]);\n  // update trial, depends on session\n  useEffect(() => { updateTrial(session, setTrial) }, [session, assignments]);\n  \n  // set session to default value\n  useEffect(()=>{\n    if(session && assignments && assignments.length > 0){\n      let itemId = session.currentItemId;\n      let assignId = session.currentAssignmentId;\n      if (itemId.length * assignId.length === 0){\n        let newSession = makeNewSession(session, \n            assignments[0].assignId, assignments[0].items[0]);        \n        onSessionUpdated(newSession);\n      }\n    }\n  }, [session, assignments]);\n\n  let currentItemId = session ? session.currentItemId : \"\";\n\n  let controllerStyle = {\n    background: \"radial-gradient(circle at bottom left, rgba(0,0,0,1) 0%, rgba(75,75,75,1) 100%)\",\n    borderRight: \"2px dashed darkblue\",\n    color: \"white\",\n  }\n\n  /*\n   *   Event callback\n   */\n  const updateSenseRevision = (\n    session: SenseAnnotSession|null,\n    trial: Trial,\n    revision: SenseRevision | null = null) => {\n\n    if (session && revision) {\n      const assignId = trial.assignId;\n      const itemId = trial.itemId;\n      let newAnnotations = Object.assign({}, annotations);\n      let annot = newAnnotations[assignId];\n      \n      if (annot) {\n        annot.results[itemId] = revision;\n      } else {\n        annot = makeNewAnnotation(assignId, session);\n        annot.results[itemId] = revision;\n        newAnnotations[assignId] = annot;\n      }\n      setAnnotations(newAnnotations);\n      onAnnotationUpdated(annot);\n    }\n  }\n\n\n  /*\n   *    Database update callback\n   */\n  const onSessionUpdated = (newSession: SenseAnnotSession) => {\n    setSession(newSession);\n    uploadSession(newSession);\n  }\n\n  const onAnnotationUpdated = (newAnnotation: Annotation) => {\n    uploadAnnotation(newAnnotation);\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-3 col-sm-6 d-none d-sm-block\" style={controllerStyle}>\n          <Controller\n            user={user}\n            session={session}\n            assignments={assignments}\n            annotations={annotations}\n            onSessionUpdated={onSessionUpdated}\n            login_fn={login}\n            logout_fn={logout}></Controller>\n        </div>\n        <div className=\"col-md-9 col-sm-6 col-xs-12\">\n          <SentenceViewer\n            itemId={currentItemId}\n            sentence={trial.sentence}></SentenceViewer>\n          <SenseSorter trial={trial}\n            annotations={annotations}\n            onSenseRevisionUpdated={(trial, revision) => \n              updateSenseRevision(session, trial, revision)}></SenseSorter>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SenseAnnot;\n","import { SenseAnnotSession, Annotations, Annotation } from \"../datatypes\";\nimport firebase from \"firebase\";\n\nexport function uploadSession(session: SenseAnnotSession){\n  let db = firebase.firestore();\n  let userId = session.userId;\n  let userEmail = session.userEmail;\n  let result = db.collection(\"sessions\").doc(userEmail).set(session);\n  return result;\n}\n\nexport function uploadAnnotation(annotation: Annotation){\n    let db = firebase.firestore();\n    let result = db.collection(\"annotations\")\n      .doc(annotation.annotId).set(annotation);\n    return result;\n}","import React from 'react';\n// import logo from './logo.svg';\nimport SenseAnnot from './SenseAnnot/SenseAnnot'\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { initializeIcons } from '@uifabric/icons';\nimport './App.css';\n\ninitializeIcons();\n\nfunction App() {\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <SenseAnnot />\n    </DndProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}