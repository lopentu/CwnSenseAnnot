{"version":3,"sources":["Controller/LoginStatus.tsx","Controller/Session.tsx","Controller/task_utils.tsx","Controller/AssignmentList.tsx","Controller/NavigationBar.tsx","Controller/Tasks.tsx","Controller/Controller.tsx","SentenceViewer/Token.tsx","SentenceViewer/SentenceViewer.tsx","DataHandler/login.ts","DataHandler/getData.ts","SenseSorter/sorter_updater.tsx","SenseSorter/SenseList.tsx","SenseSorter/SenseTreeView.tsx","SenseSorter/RevisionView.tsx","SenseSorter/SenseSorter.tsx","SenseAnnot/annot_updater.tsx","SenseAnnot/SenseAnnot.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["LoginStatus","props","linkStyle","root","color","fontSize","textDecoration","user","Stack","horizontal","name","style","paddingLeft","Link","styles","onClick","logout_fn","login_fn","Session","session","sess","last_time","Date","lastActivity","toLocaleString","id","populate_task_items","currentAssignId","assignments","annotations","map","x","assign_id","assignId","nTotal","lemma","items","length","nDone","nAmbig","Object","values","results","reduce","obj","probs","summarise_progress","checked","AssignmentList","List","onRenderCell","render_task_item","item","index","actStyle","padding","height","icon","iconHovered","rootHovered","border","borderRadius","check_button","ActionButton","iconProps","iconName","Item","align","grow","NavigationBar","buttonStyle","horizontalAlign","IconButton","title","Label","minWidth","TextField","width","defaultValue","currentItemId","Tasks","assign_items","currentAssignmentId","progress","compute_progress","tokens","childrenGap","ProgressIndicator","itemName","label","Math","round","percentComplete","Separator","Controller","className","background","borderRight","Token","token","isFocus","SentenceViewer","sentence","itemId","undefined","tokenId","parseInt","split","err","transformUser","user_raw","empty","displayName","email","photoUrl","photoURL","uid","login","a","console","log","provider","firebase","GoogleAuthProvider","setPersistence","Auth","Persistence","LOCAL","then","signInWithPopup","result","credential","accessToken","debug","logout","signOut","base_url","process","fetchSenses","sense_index","indexOf","fetch","response","json","fetchSession","fetchAssignments","fetchAnnotations","data","fetchSentence","sentenceId","fetchSenseTree","userEmail","url","trial","senseSetter","senses","error","senseTreeSetter","senseTree","senseRevisionSetter","revision","annotator","timestamp","now","candidates","annot","selectionModel","Selection","onSelectionChanged","getSelection","renderCell","sense","TooltipHost","tooltipProps","examples","onRenderContent","cwn_id","delay","TooltipDelay","zero","directionalHint","DirectionalHint","rightCenter","Persona","imageInitials","pos","initialsColor","text","definition","secondaryText","size","PersonaSize","size32","presenceTitle","join","showSecondaryText","marginTop","primaryText","SenseList","maxWidth","overflowX","overflowY","makeNodeTitleElement","node","path","onNodeClick","SenseTreeView","useState","setSenseTree","useEffect","updateSenseTree","treeData","children","onChange","newData","newTree","assign","rowHeight","generateNodeProps","RevisionView","iconStyle","choiceElem","findSense","senseText","ariaLabel","SenseSorter","setSenses","senseRevision","setSenseRevision","updateSenses","updateSenseRevision","session_setter","new_session","assignments_setter","trace","annotations_setter","trial_setter","SenseAnnot","setUser","setSession","setAnnotations","setAssignments","setTrial","signed_in","not_signed_in","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","onAuthStateChanged","raw_user","updateSession","updateAssignments","updateAnnotations","updateTrial","initializeIcons","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.393f6925.chunk.js","sourcesContent":["import React from 'react';\r\nimport { User } from \"../datatypes\"\r\nimport { Link, Stack } from \"@fluentui/react\"\r\n\r\nexport interface ILoginStatus {\r\n  user: User|null;\r\n  login_fn: () => void;\r\n  logout_fn: () => void;\r\n}\r\n\r\nexport function LoginStatus(props: ILoginStatus) {\r\n  let linkStyle = {root: {color: \"white\", fontSize: \"small\", textDecoration: \"underline\"}}\r\n  if (props.user) {\r\n    return (\r\n      <Stack horizontal>\r\n        <div>{props.user.name}</div>\r\n        <div style={{paddingLeft: \"10pt\"}}>\r\n          <Link styles={linkStyle} onClick={props.logout_fn}>Logout</Link>\r\n        </div>\r\n      </Stack>\r\n    )\r\n  } else {\r\n    return (\r\n      <Stack horizontal>\r\n        <div>Not logged in</div>\r\n        <div>\r\n          <Link styles={linkStyle} onClick={props.login_fn}>Login</Link>\r\n        </div>\r\n      </Stack>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Stack } from \"@fluentui/react\";\r\nimport { SenseAnnotSession } from \"../datatypes\";\r\n\r\nexport interface ISessionProps {\r\n  session: SenseAnnotSession | null,\r\n  onNextTrial?: () => void;\r\n  onPrevTrial?: () => void;\r\n  onNextTodo?: () => void;\r\n  onPrevTodo?: () => void;\r\n}\r\n\r\nfunction toftime(timestamp: number){\r\n  let d = new Date(timestamp);\r\n  d.toLocaleString('en-GB')\r\n}\r\n\r\nexport function Session(props: ISessionProps) {\r\n  if (props.session !== null) {\r\n    let sess = props.session;\r\n    let last_time = new Date(sess.lastActivity).toLocaleString(\"en-GB\")\r\n    return (\r\n      <Stack id=\"session-wrapper\">\r\n        <div style={{fontSize: \"small\"}}>Last activity:</div>\r\n        <div style={{fontSize: \"small\"}}>{last_time}</div>        \r\n      </Stack>\r\n    )\r\n  } else {\r\n    return <Stack id=\"session-wrapper\"></Stack>;\r\n  }\r\n\r\n}","import { Annotations, Assignments } from \"../datatypes\";\r\n\r\nexport interface ITaskItem {\r\n  name: string;\r\n  checked: boolean;\r\n  nTotal: number;\r\n  nDone: number; nAmbig: number\r\n}\r\n\r\n\r\nexport function compute_progress(items: ITaskItem[]) {\r\n  let { nDone, nTotal } = items.reduce((obj, x) => {\r\n    obj.nDone += x.nDone;\r\n    obj.nTotal += x.nTotal;\r\n    return obj;\r\n  }, { nDone: 0, nTotal: 0 });\r\n  return nDone / nTotal;\r\n}\r\n\r\nfunction summarise_progress(\r\n  annotations: Annotations, assign_id: string) {\r\n\r\n  return Object.values(annotations[assign_id].results)\r\n    .reduce((obj, x) => {\r\n      if (x.probs.length > 0) {\r\n        obj.nDone += x.probs[0] >= 0.8 ? 1 : 0;\r\n        obj.nAmbig += x.probs[0] < 0.8 ? 1 : 0;\r\n      }\r\n      return obj;\r\n    }, { nDone: 0, nAmbig: 0 })\r\n}\r\n\r\nexport function populate_task_items(\r\n  currentAssignId: string,\r\n  assignments: Assignments,\r\n  annotations: Annotations\r\n) {\r\n\r\n  return assignments.map((x) => {\r\n    let assign_id = x.assignId;\r\n    let lemma = x.lemma;\r\n    let nTotal = x.items.length;\r\n    let nDone = 0;\r\n    let nAmbig = 0;\r\n    if (assign_id in annotations) {\r\n      ({ nDone, nAmbig } = summarise_progress(\r\n        annotations, assign_id))\r\n    }\r\n\r\n    return {\r\n      name: x.assignId,\r\n      nTotal, nDone, nAmbig,\r\n      checked: x.assignId === currentAssignId\r\n    } as ITaskItem;\r\n  });\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { Annotations, Assignments } from '../datatypes';\r\nimport { List, ActionButton, Stack } from '@fluentui/react';\r\nimport { ITaskItem } from './task_utils';\r\n\r\nexport interface IAssignmentListProps{\r\n  items: ITaskItem[]\r\n}\r\n\r\nexport function AssignmentList(props: IAssignmentListProps){\r\n\r\n  return (\r\n    <List items={props.items} onRenderCell={render_task_item}></List>\r\n  );\r\n}\r\n\r\nfunction render_task_item(item: ITaskItem | undefined, index: number | undefined) {\r\n\r\n  let actStyle = {\r\n    root: { padding: \"1px\", height: \"24pt\" },\r\n    icon: { color: \"white\" },\r\n    iconHovered: { color: \"white\" },\r\n    rootHovered: {\r\n      border: \"1px solid white\",\r\n      borderRadius: \"5px\"\r\n    }\r\n  };\r\n\r\n  if (item) {\r\n\r\n    let check_button = item.checked ?\r\n      (<ActionButton styles={actStyle} iconProps={{ iconName: \"MSNVideosSolid\" }} checked={false} />) :\r\n      (<ActionButton styles={actStyle} iconProps={{ iconName: \"MSNVideos\" }} checked={false} />);\r\n\r\n    return (\r\n      <Stack horizontal>\r\n        <Stack.Item align=\"center\">{check_button}</Stack.Item>\r\n        <Stack.Item grow={1} align=\"center\">{item.name}</Stack.Item>\r\n        <Stack.Item align=\"center\">{item.nDone}/{item.nAmbig}/{item.nTotal}</Stack.Item>\r\n      </Stack>\r\n    )\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Stack, IconButton, TextField, Label } from '@fluentui/react';\r\n\r\nexport interface INavigationBar {\r\n  currentItemId: string;\r\n}\r\n\r\nexport function NavigationBar(props: INavigationBar) {\r\n  let buttonStyle = {\r\n    root:\r\n      { color: \"white\", border: \"1px solid white\", borderRadius: \"5px\" }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Stack horizontal horizontalAlign=\"space-evenly\">\r\n        <IconButton styles={buttonStyle} iconProps={{ iconName: \"CaretSolidLeft\" }} title=\"Previous Item\" />\r\n        <IconButton styles={buttonStyle} iconProps={{ iconName: \"CaretLeft8\" }} title=\"Previous Todo\" />\r\n        <IconButton styles={buttonStyle} iconProps={{ iconName: \"CaretRight8\" }} title=\"Next Todo\" />\r\n        <IconButton styles={buttonStyle} iconProps={{ iconName: \"CaretSolidRight\" }} title=\"Next Item\" />\r\n      </Stack>\r\n      <Stack horizontal>\r\n        <Stack.Item>\r\n          <Label styles={{ root: { color: \"white\", minWidth: \"70px\" } }}>Go to Item</Label>\r\n        </Stack.Item>\r\n        <Stack.Item grow={1}>\r\n          <TextField styles={{ root: { width: \"100%\" } }}\r\n            defaultValue={props.currentItemId} />\r\n        </Stack.Item>\r\n      </Stack>\r\n    </>\r\n  );\r\n}","import React from 'react';\r\nimport { Assignments, Annotations, SenseAnnotSession } from '../datatypes';\r\nimport { List, Stack, IconButton, ProgressIndicator, Button, ActionButton, Label, TextField, Separator } from '@fluentui/react';\r\nimport { white } from 'color-name';\r\nimport { populate_task_items, compute_progress } from './task_utils';\r\nimport { AssignmentList } from './AssignmentList';\r\nimport { NavigationBar } from './NavigationBar';\r\n\r\n\r\nexport interface ITasksProps {\r\n  session: SenseAnnotSession | null;  \r\n  assignments: Assignments;\r\n  annotations: Annotations;\r\n  onAssignIdChanged?: (assignId: string) => void;\r\n  onItemIdChanged?: (itemId: string) => void;\r\n}\r\n\r\nexport function Tasks(props: ITasksProps) {\r\n  let assignments = props.assignments;\r\n  let annotations = props.annotations;\r\n  let session = props.session;\r\n  if (session === null) {\r\n    return null;\r\n  }\r\n\r\n  \r\n  let assign_items = populate_task_items(\r\n    session.currentAssignmentId, props.assignments, props.annotations);\r\n  let progress = compute_progress(assign_items);\r\n\r\n  return (\r\n    <Stack tokens={{ childrenGap: 10 }}>\r\n      <ProgressIndicator\r\n        styles={{ itemName: { color: \"white\" } }}\r\n        label={`${Math.round(progress * 10000) / 100}% Complete`}\r\n        percentComplete={progress} />\r\n      <NavigationBar currentItemId={session.currentItemId}/>      \r\n      <Separator></Separator>\r\n      <AssignmentList items={assign_items}/>\r\n    </Stack>\r\n  )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { User, SenseAnnotSession, Assignments, Annotations } from \"../datatypes\"\r\nimport { Stack } from '@fluentui/react';\r\nimport { LoginStatus } from './LoginStatus';\r\nimport { Session } from './Session';\r\nimport { Tasks } from './Tasks';\r\n\r\nexport interface IControllerData {\r\n  user: User | null;\r\n  session: SenseAnnotSession | null;\r\n  assignments: Assignments;\r\n  annotations: Annotations;  \r\n  login_fn: () => void;\r\n  logout_fn: () => void;\r\n}\r\n\r\nfunction Controller(props: IControllerData) {\r\n\r\n  let controllerStyle = {    \r\n    background: \"radial-gradient(circle at bottom left, rgba(0,0,0,1) 0%, rgba(75,75,75,1) 100%)\",\r\n    borderRight: \"2px dashed darkblue\",\r\n    color: \"white\",\r\n  }\r\n  \r\n  \r\n  return (\r\n    <div className=\"col-3\" style={controllerStyle}>\r\n      <Stack tokens={{childrenGap: 5, padding:10}}>\r\n        <LoginStatus user={props.user} login_fn={props.login_fn} logout_fn={props.logout_fn} />\r\n        <Session session={props.session}></Session>\r\n        <Tasks \r\n          session={props.session}           \r\n          assignments={props.assignments} \r\n          annotations={props.annotations}></Tasks>                \r\n      </Stack>\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Controller;","import React from 'react';\r\nimport { PretaggedToken } from '../datatypes';\r\nimport { Stack, mergeStyles, IStyle } from '@fluentui/react';\r\nimport './token.css';\r\n\r\nexport interface ITokenProps {\r\n  token: PretaggedToken;\r\n  isFocus: boolean;\r\n}\r\n\r\nexport function Token(props: ITokenProps) {\r\n  let { token, isFocus } = props;\r\n  let wordStyle = { fontSize: \"large\" };\r\n  let posStyle = { fontSize: \"small\" };\r\n\r\n\r\n  return (\r\n    <Stack horizontalAlign=\"center\">      \r\n      <div style={posStyle}>{token[1]}</div> {/* POS */}\r\n      <div\r\n        style={wordStyle}\r\n        title={`${token[2]}:${token[3]}`}\r\n        className={isFocus ? \"focus-token\" : \"\"}>\r\n        {token[0]}\r\n      </div> {/* Word */}\r\n    </Stack>\r\n  )\r\n}","import React from 'react';\r\nimport { PretaggedToken } from '../datatypes';\r\nimport { Token } from './Token';\r\nimport { Stack } from '@fluentui/react';\r\n\r\nexport interface ISentenceViewerData {\r\n  sentence: PretaggedToken[];\r\n  itemId: string;\r\n}\r\n\r\nfunction SentenceViewer(props: ISentenceViewerData) {\r\n  let sentence = props.sentence;\r\n  let itemId = props.itemId;\r\n\r\n  if (sentence === undefined) {\r\n    return null;\r\n  } else {\r\n    let tokenId = -1;\r\n    try {\r\n      tokenId = parseInt(itemId.split(\":\")[1]);\r\n    } catch(err){\r\n      //pass\r\n    }\r\n\r\n    return (\r\n      <div className=\"mx-auto mt-5\">\r\n        <div className=\"card-body bg-light p-5 m-3 border border-primary rounded-lg\">\r\n          <Stack horizontal  tokens={{childrenGap: 3}}>\r\n            {sentence.map((token, index) => {\r\n              let isFocus = tokenId == index;\r\n              return (<Token token={token} isFocus={isFocus}></Token>)\r\n            })}\r\n          </Stack>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SentenceViewer;","import * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport {User} from \"../datatypes\"\r\n\r\nfunction transformUser(user_raw: firebase.User): User{\r\n  let empty = (x: string|null) => {return x? x: \"\"};\r\n  let user = {\r\n    name: empty(user_raw.displayName),\r\n    email: empty(user_raw.email),\r\n    photoUrl: empty(user_raw.photoURL),\r\n    uid: empty(user_raw.uid)\r\n  }\r\n  return user;\r\n}\r\nexport async function login() {\r\n  console.log(\"login function called\");\r\n  let provider = new firebase.auth.GoogleAuthProvider();\r\n  try {\r\n    const result = await firebase.auth().setPersistence(firebase.auth.Auth.Persistence.LOCAL)\r\n                    .then(()=>{\r\n                      return firebase.auth().signInWithPopup(provider);\r\n                    });\r\n    \r\n    if (result.credential) {\r\n      let token = (result.credential as firebase.auth.OAuthCredential).accessToken;\r\n      let user: User|null = null;      \r\n      let user_raw = result.user;\r\n      if (user_raw){        \r\n        user = transformUser(user_raw);\r\n      }\r\n      return user;      \r\n    }\r\n  }\r\n  catch (error) {\r\n    console.debug(error);\r\n  }\r\n}\r\n\r\nexport function logout() {\r\n  firebase.auth().signOut();\r\n}\r\n\r\nexport function subscribeLoginStatus(\r\n    signed_in: ((user: User)=>void), \r\n    not_signed_in: (()=>void)) {\r\n  firebase.auth().onAuthStateChanged((raw_user)=>{\r\n    if(raw_user){\r\n      let user = transformUser(raw_user);\r\n      signed_in(user);\r\n    } else {\r\n      not_signed_in();\r\n    }\r\n  })\r\n}","import { SenseAnnotSession, User, Assignments, Annotations, PretaggedSentence, PretaggedToken, SenseTree, SenseRevision, Annotation } from \"../datatypes\";\r\nimport { CwnSense } from \"../datatypes\";\r\nimport { object } from \"prop-types\";\r\n\r\nlet base_url = process.env.PUBLIC_URL;\r\n\r\nexport async function fetchSenses(lemma: string): Promise<CwnSense[]> {\r\n\r\n  let sense_index = \"提開跌\".indexOf(lemma)+1;  \r\n  if (sense_index < 0) {\r\n    throw \"Lemma unfound\";\r\n  } else {\r\n    return fetch(base_url + `/sample_data/senses0${sense_index}.json`)\r\n      .then((response) => {\r\n        return response.json();\r\n      });\r\n  }\r\n}\r\n\r\nexport async function fetchSession(user: User)\r\n  : Promise<SenseAnnotSession | null> {\r\n  return fetch(base_url + '/sample_data/session.json')\r\n    .then((response) => response.json());\r\n}\r\n\r\nexport async function fetchAssignments(user: User)\r\n  : Promise<Assignments> {\r\n\r\n  let url = base_url + `/sample_data/assignments.json`;\r\n  return fetch(url)\r\n    .then((response) => response.json());\r\n}\r\n\r\nexport async function fetchAnnotations(user: User)\r\n  : Promise<Annotations> {\r\n  let url = base_url + `/sample_data/annotations.json`;\r\n  return fetch(url)\r\n    .then((response) => response.json())\r\n    .then((data: Annotation[]) => {      \r\n      return data.reduce((obj: Annotations, x: Annotation)=>{\r\n        obj[x.assignId] = x;\r\n        return obj;\r\n      }, {} as Annotations);\r\n    });\r\n}\r\n\r\nexport async function fetchSentence(sentenceId: string)\r\n  : Promise<PretaggedToken[]> {\r\n  let url = base_url + `/sample_data/sample_sentences.json`;\r\n  return fetch(url)\r\n    .then((response) => response.json())\r\n    .then((data) => {          \r\n      if (sentenceId in data) {\r\n        return data[sentenceId];\r\n      } else {\r\n        return [];\r\n      }\r\n    });\r\n}\r\n\r\nexport async function fetchSenseTree(userEmail: string, lemma: string)\r\n  : Promise<SenseTree | null> {\r\n    \r\n  let sense_index = \"提開跌\".indexOf(\"提\")+1;\r\n  if (sense_index < 0) {\r\n    throw \"Lemma unfound\";\r\n  } else {\r\n    let url = base_url + `/sample_data/senseTree0${sense_index}.json`;\r\n    return fetch(url)\r\n      .then((response) => response.json());\r\n  }\r\n}\r\n\r\n// senseRevision should not be fetched independently? \r\n// keep for reference\r\nexport async function fetchSenseRevision(userEmail: string, itemId: string)\r\n  : Promise<SenseRevision | null> {\r\n  return null;\r\n}","import { User, PretaggedToken, SenseRevision, CwnSense, SenseTree, Trial, Annotations } from \"../datatypes\";\r\nimport { fetchAnnotations, fetchSenses } from \"../DataHandler\";\r\nimport { fetchSenseTree, fetchSenseRevision } from \"../DataHandler/getData\";\r\n\r\ntype StateSetter<T> = React.Dispatch<React.SetStateAction<T>>\r\n\r\nexport async function updateSenses(\r\n  trial: Trial,\r\n  senseSetter: StateSetter<CwnSense[]>) {\r\n  \r\n  let token = trial.token;\r\n  let senses = [] as CwnSense[];  \r\n  if (token) {\r\n    // let lemma = token[0];\r\n    let lemma = \"提\";\r\n    try {\r\n      senses = await fetchSenses(lemma);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  senseSetter(senses);\r\n}\r\n\r\nexport async function updateSenseTree(\r\n  trial: Trial,\r\n  senseTreeSetter: StateSetter<SenseTree|null>) {\r\n  \r\n  let userEmail = trial.userEmail;\r\n  let token = trial.token;\r\n  let senseTree: SenseTree|null = null;  \r\n  if (userEmail && token) {\r\n    const lemma = token[0];\r\n    try {\r\n      senseTree = await fetchSenseTree(userEmail, lemma);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  }\r\n\r\n  senseTreeSetter(senseTree);\r\n}\r\n\r\n\r\nexport async function updateSenseRevision(\r\n  trial: Trial,\r\n  annotations: Annotations,\r\n  senseRevisionSetter: StateSetter<SenseRevision|null>) {\r\n\r\n  let revision: SenseRevision = {\r\n    annotator: trial.userEmail,\r\n    timestamp: Date.now(),\r\n    assignId: trial.assignId,\r\n    itemId: trial.itemId, \r\n    candidates: [],\r\n    probs: []\r\n  };\r\n\r\n  const itemId = trial.itemId;\r\n  const assignId = trial.assignId;    \r\n  if (assignId && itemId) {            \r\n    let annot = annotations[assignId];    \r\n    if (annot && itemId in annot.results){\r\n      revision = annot.results[itemId];\r\n    }\r\n  }\r\n\r\n  senseRevisionSetter(revision);\r\n}","import React from 'react';\r\nimport { CwnSense } from '../datatypes';\r\nimport { DetailsList, DetailsListLayoutMode, Selection, SelectionMode, List, Persona, PersonaSize, PersonaInitialsColor, TooltipHost, DirectionalHint, TooltipDelay } from '@fluentui/react';\r\n\r\nexport interface ISenseListProps {\r\n  senses: CwnSense[];\r\n}\r\n\r\nlet selectionModel = new Selection({\r\n  onSelectionChanged: () => {\r\n    console.log(selectionModel.getSelection());\r\n  }\r\n});\r\n\r\nfunction examplesTooltips(examples: string[]) {\r\n  return {\r\n    onRenderContent: () => {\r\n      return (<ul>\r\n        {examples.map((x) => (<li>{x}</li>))}\r\n      </ul>)\r\n    }\r\n  }\r\n}\r\n\r\nfunction renderCell(sense: CwnSense | undefined, index: number | undefined) {\r\n  if (sense && index) {\r\n\r\n    return (\r\n      <TooltipHost\r\n        tooltipProps={examplesTooltips(sense.examples)}\r\n        id={\"tp\" + sense.cwn_id}\r\n        delay={TooltipDelay.zero}\r\n        directionalHint={DirectionalHint.rightCenter}\r\n      >\r\n        <Persona\r\n          imageInitials={sense.pos}\r\n          initialsColor={(index % 6) as PersonaInitialsColor}\r\n          text={sense.definition}\r\n          secondaryText={sense.examples[0]}\r\n          size={PersonaSize.size32}\r\n          presenceTitle={sense.examples.join(\"\\n\")}\r\n          showSecondaryText={true}\r\n          styles={{\r\n            root: { marginTop: \"7px\" },\r\n            primaryText: { fontSize: \"11pt\" },\r\n            secondaryText: { fontSize: \"8pt\", color: \"gray\" }\r\n          }}\r\n        />\r\n      </TooltipHost>\r\n    )\r\n  }\r\n}\r\n\r\nexport function SenseList(props: ISenseListProps) {\r\n\r\n  return (\r\n    <div style={{\r\n      maxWidth: \"400px\",\r\n      height: \"500px\",\r\n      overflowX: \"hidden\", overflowY: \"scroll\"\r\n    }}>\r\n      <List\r\n        items={props.senses}\r\n        onRenderCell={renderCell}\r\n      />\r\n    </div>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { SenseTree, Trial, SenseTreeNode } from '../datatypes';\r\nimport 'react-sortable-tree/style.css';\r\nimport SortableTree, { TreeItem } from 'react-sortable-tree';\r\nimport { updateSenseTree } from './sorter_updater';\r\n\r\nexport interface ISenseTreeViewProps {\r\n  trial: Trial\r\n}\r\n\r\nfunction onNodeClick(node:TreeItem){\r\n  console.log(node);\r\n}\r\n\r\nfunction makeNodeTitleElement(node: TreeItem, path: React.ReactText[]): JSX.Element{\r\n  return (\r\n    <div onClick={()=>{onNodeClick(node)}}>{node.title}</div>\r\n  )\r\n}\r\n\r\nexport function SenseTreeView(props: ISenseTreeViewProps) {\r\n\r\n  const [senseTree, setSenseTree] = useState<SenseTree | null>(null)\r\n\r\n  useEffect(() => {\r\n    updateSenseTree(props.trial, setSenseTree)\r\n  }, [props.trial]);\r\n\r\n  function onTreeDataChanged(newData: TreeItem[]) {\r\n    if (newData) {\r\n      let newTree = Object.assign({}, senseTree);\r\n      newTree.root.children = newData as SenseTreeNode[];\r\n      setSenseTree(newTree);\r\n    } else {\r\n      setSenseTree(null);\r\n    }\r\n  }\r\n\r\n  if (senseTree) {\r\n    let treeData = senseTree.root.children as TreeItem[];\r\n    return (\r\n      <div style={{ width: 500, height: 500 }}>\r\n        {/* treeData={props.senseTree.children as TreeItem[]} */}\r\n        <SortableTree\r\n          treeData={treeData}\r\n          onChange={onTreeDataChanged}\r\n          rowHeight={50}\r\n          generateNodeProps={({ node, path }) => ({\r\n            title: makeNodeTitleElement(node, path),\r\n          })}\r\n        />\r\n      </div>\r\n    )\r\n  } else {\r\n    return null;\r\n  }\r\n}","import React from 'react';\r\nimport { SenseRevision, CwnSense } from '../datatypes';\r\nimport { Stack, IconButton } from '@fluentui/react';\r\n\r\nexport interface IRevisionViewProps {\r\n  revision: SenseRevision | null;\r\n  senses: CwnSense[]\r\n}\r\n\r\nfunction findSense(cwn_id: string, senses: CwnSense[]) {\r\n  let index = senses.map((x) => x.cwn_id).indexOf(cwn_id);\r\n  \r\n  if (index < 0) {\r\n    return null;\r\n  } else {\r\n    return senses[index];\r\n  }\r\n}\r\n\r\nexport function RevisionView(props: IRevisionViewProps) {\r\n  let revision = props.revision;\r\n  let iconStyle = { height: \"30px\", width: \"30px\", fontSize: \"100px\" };\r\n  if (revision) {    \r\n    \r\n    let choiceElem = null;\r\n    if (revision.candidates.length > 0) {\r\n      let sense = findSense(revision.candidates[0], props.senses)\r\n      if (sense) {\r\n        let senseText = `${sense.cwn_id}: ${sense.definition}`\r\n        choiceElem = (<div> 已選擇：{senseText} </div>)\r\n      }\r\n\r\n    }\r\n\r\n    return (\r\n      <Stack className=\"alert alert-primary\" horizontal styles={{root: {width: \"100%;\"}}}>\r\n        <Stack.Item grow={1}>{choiceElem}</Stack.Item>\r\n        <Stack.Item>\r\n          <Stack tokens={{ childrenGap: 2 }} horizontal horizontalAlign=\"end\">\r\n            <IconButton style={iconStyle} iconProps={{ iconName: 'CheckMark' }} title=\"確認\" ariaLabel=\"CheckMark\" />\r\n            <IconButton style={iconStyle} iconProps={{ iconName: 'Communications' }} title=\"需要討論\" ariaLabel=\"Communications\" />\r\n          </Stack>\r\n        </Stack.Item>\r\n      </Stack>\r\n    )\r\n  } else {\r\n    return null;\r\n  }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport SenseItem from './SenseItem';\r\nimport { CwnSense, PretaggedToken, SenseTree, Annotations, SenseRevision, Trial } from '../datatypes';\r\nimport { User } from '../datatypes';\r\nimport { updateSenses, updateSenseTree, updateSenseRevision } from './sorter_updater';\r\nimport { SenseList } from './SenseList';\r\nimport { Stack } from '@fluentui/react';\r\nimport { SenseTreeView } from './SenseTreeView';\r\nimport { RevisionView } from './RevisionView';\r\n\r\nexport interface ISenseSorterData {\r\n  trial: Trial;\r\n  annotations: Annotations;\r\n}\r\n\r\nfunction SenseSorter(props: ISenseSorterData) {\r\n  // let senseData = props.senseData;\r\n\r\n  let [senses, setSenses] = useState([] as CwnSense[]);  \r\n  let [senseRevision, setSenseRevision] = useState<SenseRevision | null>(null);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    updateSenses(props.trial, setSenses)\r\n  }, [props.trial]);  \r\n\r\n  useEffect(() => {\r\n    updateSenseRevision(props.trial, props.annotations, setSenseRevision)\r\n  }, [props.trial, props.annotations])\r\n\r\n  let borderStyle = { border: \"2px solid black\" };\r\n  return (\r\n    <Stack>\r\n      <Stack.Item align=\"center\">\r\n        <RevisionView revision={senseRevision} senses={senses}/>\r\n      </Stack.Item>\r\n      <Stack horizontal>\r\n        <Stack.Item grow={1}><SenseList senses={senses}></SenseList></Stack.Item>\r\n        <Stack.Item grow={1}><SenseTreeView trial={props.trial} /></Stack.Item>\r\n\r\n      </Stack>\r\n    </Stack>\r\n\r\n\r\n\r\n\r\n\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default SenseSorter;\r\n","import { SenseAnnotSession, User, Assignments, Trial, Annotations } from \"../datatypes\";\r\nimport { fetchSenses, fetchSession, fetchAnnotations } from '../DataHandler';\r\nimport { fetchAssignments, fetchSentence } from '../DataHandler';\r\n\r\ntype StateSetter<T> = React.Dispatch<React.SetStateAction<T>>\r\nexport async function updateSession(\r\n  user: User | null,\r\n  session_setter: StateSetter<SenseAnnotSession | null>) {\r\n\r\n  let new_session: SenseAnnotSession | null;\r\n  if (user !== null) {\r\n    try {\r\n      new_session = await fetchSession(user);\r\n      console.debug(new_session);\r\n    } catch (err) {\r\n      console.error(err);\r\n      new_session = null;\r\n    }\r\n  } else {\r\n    new_session = null;\r\n  }\r\n\r\n  session_setter(new_session);\r\n}\r\n\r\nexport async function updateAssignments(\r\n  user: User | null,\r\n  assignments_setter: StateSetter<Assignments>) {\r\n\r\n  let assignments: Assignments = [];\r\n  if (user !== null) {\r\n    try {\r\n      assignments = await fetchAssignments(user);\r\n    } catch (err) {\r\n      console.error(err);\r\n      console.trace();\r\n      assignments = [];\r\n    }\r\n  } else {\r\n    assignments = [];\r\n  }\r\n\r\n  assignments_setter(assignments);\r\n}\r\n\r\n\r\nexport async function updateAnnotations(\r\n  user: User | null,\r\n  annotations_setter: StateSetter<Annotations>) {\r\n\r\n  let annotations = {} as Annotations;\r\n  if (user !== null) {\r\n    try {\r\n      annotations = await fetchAnnotations(user);\r\n    } catch (err) {\r\n      console.error(err);      \r\n    }\r\n  } else {\r\n    // pass\r\n  }\r\n\r\n  annotations_setter(annotations);\r\n}\r\n\r\nexport async function updateTrial(\r\n  session: SenseAnnotSession | null,  \r\n  trial_setter: StateSetter<Trial>) {\r\n\r\n  let trial: Trial = {} as Trial;\r\n\r\n  if (session) {\r\n    let itemId = session.currentItemId;\r\n    let assignId = session.currentAssignmentId;    \r\n    \r\n    let sentenceId = itemId.split(\":\")[0];\r\n    let tokenId = parseInt(itemId.split(\":\")[1]);    \r\n    try {\r\n      trial.sentence = await fetchSentence(sentenceId);      \r\n      trial.token = trial.sentence[tokenId];\r\n      trial.userEmail = session.userEmail;\r\n      trial.assignId = assignId;\r\n      trial.itemId = itemId;      \r\n    } catch (err) {\r\n      console.error(err);      \r\n    }\r\n  } else {\r\n    // pass\r\n  }\r\n\r\n  trial_setter(trial);\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport Controller from '../Controller/Controller';\r\nimport SentenceViewer from '../SentenceViewer/SentenceViewer';\r\nimport SenseSorter from '../SenseSorter/SenseSorter';\r\nimport { Assignments, Trial, Annotations } from \"../datatypes\";\r\nimport { User, SenseAnnotSession } from \"../datatypes\";\r\nimport { updateSession, updateAssignments, updateTrial, updateAnnotations } from \"./annot_updater\";\r\nimport { login, logout, subscribeLoginStatus } from '../DataHandler';\r\nimport * as firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/analytics\";\r\n\r\nfunction initializeFirebase() {\r\n  var firebaseConfig = {\r\n    apiKey: \"AIzaSyCtaBIZ-IiQ0a5Z0LsuEnVGmojJbY9yvMs\",\r\n    authDomain: \"langon-281613.firebaseapp.com\",\r\n    databaseURL: \"https://langon-281613.firebaseio.com\",\r\n    projectId: \"langon-281613\",\r\n    storageBucket: \"langon-281613.appspot.com\",\r\n    messagingSenderId: \"98385288306\",\r\n    appId: \"1:98385288306:web:09cdd581f06c0e3cdb76eb\",\r\n    measurementId: \"G-36C7NTBFN0\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  firebase.analytics();\r\n}\r\n\r\nfunction SenseAnnot() {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [session, setSession] = useState<SenseAnnotSession | null>(null);\r\n  const [annotations, setAnnotations] = useState({} as Annotations);\r\n  const [assignments, setAssignments] = useState<Assignments>([]);\r\n  const [trial, setTrial] = useState<Trial>({} as Trial);\r\n  \r\n\r\n  // initialization\r\n  useEffect(() => {\r\n    initializeFirebase();\r\n    subscribeLoginStatus(\r\n      (user) => setUser(user),\r\n      () => setUser(null));\r\n  }, []);\r\n\r\n  // update session, depends on user\r\n  useEffect(() => { updateSession(user, setSession) }, [user]);\r\n  // update Assignments, depends on user\r\n  useEffect(() => { updateAssignments(user, setAssignments) }, [user])\r\n  // update annotations, depends on user\r\n  useEffect(() => { updateAnnotations(user, setAnnotations) }, [user]);\r\n  // update trial, depends on session\r\n  useEffect(() => { updateTrial(session, setTrial) }, [session, assignments]);\r\n  \r\n  let currentItemId = session? session.currentItemId: \"\";\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <Controller \r\n          user={user} \r\n          session={session} \r\n          assignments={assignments}\r\n          annotations={annotations}\r\n          login_fn={login}\r\n          logout_fn={logout}></Controller>\r\n        <div className=\"col\">          \r\n          <SentenceViewer \r\n            itemId={currentItemId}\r\n            sentence={trial.sentence}></SentenceViewer>\r\n          <form>\r\n            <SenseSorter trial={trial} annotations={annotations}></SenseSorter>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SenseAnnot;","import React from 'react';\n// import logo from './logo.svg';\nimport SenseAnnot from './SenseAnnot/SenseAnnot'\nimport { initializeIcons } from '@uifabric/icons';\nimport './App.css';\n\ninitializeIcons();\n\nfunction App() {\n  return (\n    <SenseAnnot />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}